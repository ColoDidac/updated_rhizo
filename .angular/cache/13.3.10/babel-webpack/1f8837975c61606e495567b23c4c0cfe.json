{"ast":null,"code":"import { User } from './user';\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationBasicService = /*#__PURE__*/(() => {\n  class AuthenticationBasicService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    login(username, password) {\n      const authorization = this.generateAuthorization(username, password);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Authorization': authorization\n        })\n      };\n      return this.http.get(`${environment.API}/user`, httpOptions).pipe(map(data => {\n        const user = new User(data);\n        user.authorization = authorization;\n        user.password = password;\n        return user;\n      }));\n    }\n\n    generateAuthorization(username, password) {\n      return `Basic ${btoa(`${username}:${password}`)}`;\n    }\n\n    storeCurrentUser(user) {\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }\n\n    logout() {\n      localStorage.removeItem('currentUser');\n    }\n\n    isLoggedIn() {\n      return localStorage.getItem('currentUser') !== null;\n    }\n\n    getCurrentUser() {\n      return new User(JSON.parse(localStorage.getItem('currentUser')));\n    }\n\n    isAdmin() {\n      const user = this.getCurrentUser();\n      return this.isLoggedIn() && user.authorities[0].authority === 'ROLE_ADMIN';\n    }\n\n  }\n\n  AuthenticationBasicService.ɵfac = function AuthenticationBasicService_Factory(t) {\n    return new (t || AuthenticationBasicService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationBasicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationBasicService,\n    factory: AuthenticationBasicService.ɵfac\n  });\n  return AuthenticationBasicService;\n})();","map":null,"metadata":{},"sourceType":"module"}