{"ast":null,"code":"import { Property } from './property';\nimport { Value } from './value';\nimport { UriUtils } from '../shared/uriutils';\nconst RDF_TYPE_URI = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\";\nexport class Description {\n  constructor(values = {}, context = {}, labels = new Map(), prefLang = 'en') {\n    this['@type'] = [];\n    this.properties = [];\n    this.labels = [];\n    this.depiction = [];\n    this.topicOf = [];\n    Object.entries(values).forEach(([key, value]) => {\n      const expandedUri = UriUtils.expandUri(key, context);\n\n      switch (expandedUri) {\n        case '@id':\n          {\n            if (value.startsWith('_:')) {\n              this['@id'] = value;\n            } else {\n              this['@id'] = UriUtils.expandUri(value, context);\n            }\n\n            break;\n          }\n\n        case '@type':\n          {\n            this['@type'] = this.processTypes(value, context, labels, prefLang);\n            break;\n          }\n\n        case 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type':\n          {\n            this['@type'] = this.processTypes(value, context, labels, prefLang);\n            break;\n          }\n\n        case '@context':\n          {\n            break;\n          }\n\n        case 'http://www.wikidata.org/prop/direct/P18':\n        case 'http://xmlns.com/foaf/0.1/depiction':\n          {\n            this.depiction = Value.getValues(key, value, context, labels, prefLang);\n            break;\n          }\n\n        case 'http://xmlns.com/foaf/0.1/isPrimaryTopicOf':\n          {\n            this.topicOf = Value.getValues(key, value, context, labels, prefLang);\n            break;\n          }\n\n        default:\n          this.properties.push(new Property(key, value, context, labels, prefLang));\n      }\n    });\n    this.label = this.pickLabel(this.properties, prefLang);\n    this.properties = this.properties.sort((a, b) => a.label.localeCompare(b.label));\n  }\n\n  static isOfType(types, classUri, context) {\n    if (types instanceof Array) {\n      return types.map(value => UriUtils.expandUri(value, context)).includes(classUri);\n    } else if (types['@id']) {\n      return UriUtils.expandUri(types['@id'], context) === classUri;\n    } else {\n      return UriUtils.expandUri(types, context) === classUri;\n    }\n  }\n\n  static getAnonResources(jsonld, labels = new Map(), prefLang = 'en') {\n    const anonResources = new Map();\n    jsonld['@graph'].filter(instance => instance['@id'].startsWith('_:')).map(instance => anonResources.set(instance['@id'], new Description(instance, jsonld['@context'], labels, prefLang)));\n    return anonResources;\n  }\n\n  static getResources(jsonld, labels = new Map(), prefLang = 'en') {\n    return jsonld['@graph'].map(instance => new Description(instance, jsonld['@context'], labels, prefLang));\n  }\n\n  static getTypedResources(jsonld, labels = new Map(), prefLang = 'en') {\n    return jsonld['@graph'].filter(instance => instance['@type'] || instance['rdf:type'] || instance[RDF_TYPE_URI]).map(instance => new Description(instance, jsonld['@context'], labels, prefLang));\n  }\n\n  static getResourcesOfType(jsonld, type, labels = new Map(), prefLang = 'en') {\n    return jsonld['@graph'].filter(instance => instance['@type'] && Description.isOfType(instance['@type'], type, jsonld['@context']) || instance['rdf:type'] && Description.isOfType(instance['rdf:type'], type, jsonld['@context']) || instance[RDF_TYPE_URI] && Description.isOfType(instance[RDF_TYPE_URI], type, jsonld['@context'])).map(instance => new Description(instance, jsonld['@context'], labels, prefLang));\n  }\n\n  static getLabels(jsonld) {\n    const labels = new Map();\n\n    if (jsonld['@graph']) {\n      jsonld['@graph'].map(instance => Object.entries(instance).forEach(([key, value]) => {\n        if (key.includes('label')) {\n          labels.set(UriUtils.expandUri(instance['@id'], jsonld['@context']), value);\n        }\n      }));\n    } else if (jsonld['label'] && jsonld['@id']) {\n      labels.set(UriUtils.expandUri(jsonld['@id'], jsonld['@context']), jsonld['label']);\n    }\n\n    return labels;\n  }\n\n  pickLabel(properties, prefLang) {\n    let selection;\n\n    for (const option of ['http://www.w3.org/2004/02/skos/core#prefLabel', 'http://www.w3.org/2000/01/rdf-schema#label', 'http://xmlns.com/foaf/0.1/name', 'https://schema.org/name', 'http://schema.org/name', 'http://purl.org/dc/terms/title', 'http://purl.org/dc/elements/1.1/title']) {\n      selection = properties.filter(p => p.uri === option);\n\n      if (selection.length) {\n        break;\n      }\n    }\n\n    return selection.length ? UriUtils.pickLabel(selection[0].values.map(value => ({\n      '@language': value.language,\n      '@value': value.value\n    })), prefLang) : undefined;\n  }\n\n  processTypes(value, context = {}, labels = new Map(), prefLang = 'en') {\n    if (value instanceof Array) {\n      return value.map(url => new Value('@type', url, context, labels, prefLang));\n    } else {\n      return [new Value('@type', value, context, labels, prefLang)];\n    }\n  }\n\n  isAnon() {\n    if (this['@id'] && this['@id'].startsWith('_:')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  asJsonLd() {\n    let jsonld = '{\\n';\n    jsonld += '\\t \"@id\": \"' + this['@id'] + '\"';\n\n    if (this['@type']) {\n      jsonld += ',\\n\\t \"@type\": [' + this['@type'].map(value => '\"' + value.uri + '\"').join(', ') + ']';\n    }\n\n    if (this.labels.length) {\n      jsonld += ',\\n\\t \"http://www.w3.org/2000/01/rdf-schema#label\": [ ' + this.labels.map(value => value.asJsonLd()).join(', ') + ' ]';\n    }\n\n    if (this.depiction.length) {\n      jsonld += ',\\n\\t \"http://xmlns.com/foaf/0.1/depiction\": [' + this.depiction.map(value => value.asJsonLd()).join(', ') + ']';\n    }\n\n    if (this.topicOf.length) {\n      jsonld += ',\\n\\t \"http://xmlns.com/foaf/0.1/isPrimaryTopicOf\": [' + this.topicOf.map(value => value.asJsonLd()).join(', ') + ']';\n    }\n\n    jsonld += this.properties.map(property => ',\\n\\t \"' + property.uri + '\": [' + property.values.map(value => value.asJsonLd()).join(', ') + ']').join('');\n    return jsonld + '\\n }';\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}