{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Rest2Service } from '../shared/rest2.service';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EndpointService = /*#__PURE__*/(() => {\n  class EndpointService extends Rest2Service {\n    constructor(http) {\n      super('datasets', 'endpoints', http);\n      this.http = http;\n    }\n\n    dataGraphs(did, eid) {\n      return this.http.get(`${environment.API}/datasets/${did}/endpoints/${eid}/graphs`);\n    }\n\n    ontologyGraphs(did, eid) {\n      return this.http.get(`${environment.API}/datasets/${did}/endpoints/${eid}/ontologies`);\n    }\n\n    updateGraphs(did, eid, graphs) {\n      return this.http.put(`${environment.API}/datasets/${did}/endpoints/${eid}/graphs`, graphs);\n    }\n\n    updateOntologies(did, eid, ontologies) {\n      return this.http.put(`${environment.API}/datasets/${did}/endpoints/${eid}/ontologies`, ontologies);\n    }\n\n    serverGraphs(did, eid) {\n      return this.http.get(`${environment.API}/datasets/${did}/endpoints/${eid}/server/graphs`);\n    }\n\n    storeData(did, eid, graph, file) {\n      let params = new HttpParams();\n      params = params.append('graph', graph);\n      let headers = new HttpHeaders();\n      headers = headers.append('content-type', file['content-type']);\n      return this.http.post(`${environment.API}/datasets/${did}/endpoints/${eid}/server`, file, {\n        params: params,\n        headers: headers\n      });\n    }\n\n    replaceData(did, eid, graph, file) {\n      let params = new HttpParams();\n      params = params.append('graph', graph);\n      let headers = new HttpHeaders();\n      headers = headers.append('content-type', file['content-type']);\n      return this.http.put(`${environment.API}/datasets/${did}/endpoints/${eid}/server`, file, {\n        params: params,\n        headers: headers\n      });\n    }\n\n    updateEndpoint(id1, endpoint) {\n      const body = JSON.stringify(endpoint);\n      return this.http.put(`${environment.API}/datasets/${id1}/endpoints/${endpoint.id}`, body, this.getHttpOptions());\n    }\n\n    patchEndpoint(id1, endpoint) {\n      const body = JSON.stringify(endpoint);\n      return this.http.patch(`${environment.API}/datasets/${id1}/endpoints/${endpoint.id}`, body, this.getHttpOptions());\n    }\n\n    deleteEndpoint(id1, endpoint) {\n      return this.http.delete(`${environment.API}/datasets/${id1}/endpoints/${endpoint.id}`);\n    }\n\n  }\n\n  EndpointService.ɵfac = function EndpointService_Factory(t) {\n    return new (t || EndpointService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EndpointService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EndpointService,\n    factory: EndpointService.ɵfac,\n    providedIn: 'root'\n  });\n  return EndpointService;\n})();","map":null,"metadata":{},"sourceType":"module"}