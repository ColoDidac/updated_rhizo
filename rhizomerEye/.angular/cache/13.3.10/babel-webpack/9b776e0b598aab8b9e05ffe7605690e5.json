{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { filter, map, delay } from 'rxjs/operators';\nimport * as i1 from '@angular/router';\nimport { NavigationEnd, NavigationStart, NavigationError } from '@angular/router';\nimport * as i2 from '@angular/common';\nimport * as i2$1 from '@angular/platform-browser';\n\nclass DefaultConfig {\n  constructor() {\n    this.pageTracking = {\n      autoTrackVirtualPages: true,\n      basePath: '',\n      excludedRoutes: [],\n      clearIds: false,\n      clearHash: false,\n      clearQueryParams: false,\n      idsRegExp: /^\\d+$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/\n    };\n    this.developerMode = false;\n    this.ga = {};\n    this.appInsights = {};\n    this.gtm = {};\n    this.gst = {};\n  }\n\n}\n\nconst ANGULARTICS2_TOKEN = new InjectionToken('ANGULARTICS2');\n\nclass RouterlessTracking {\n  trackLocation(settings) {\n    return new BehaviorSubject({\n      url: '/'\n    });\n  }\n\n  prepareExternalUrl(url) {\n    return url;\n  }\n\n}\n\nlet Angulartics2 = /*#__PURE__*/(() => {\n  class Angulartics2 {\n    constructor(tracker, setup) {\n      this.tracker = tracker;\n      this.pageTrack = new ReplaySubject(10);\n      this.eventTrack = new ReplaySubject(10);\n      this.exceptionTrack = new ReplaySubject(10);\n      this.setAlias = new ReplaySubject(10);\n      this.setUsername = new ReplaySubject(10);\n      this.setUserProperties = new ReplaySubject(10);\n      this.setUserPropertiesOnce = new ReplaySubject(10);\n      this.setSuperProperties = new ReplaySubject(10);\n      this.setSuperPropertiesOnce = new ReplaySubject(10);\n      this.userTimings = new ReplaySubject(10);\n      const defaultConfig = new DefaultConfig();\n      this.settings = Object.assign(Object.assign({}, defaultConfig), setup.settings);\n      this.settings.pageTracking = Object.assign(Object.assign({}, defaultConfig.pageTracking), setup.settings.pageTracking);\n      this.tracker.trackLocation(this.settings).subscribe(event => this.trackUrlChange(event.url));\n    }\n    /** filters all events when developer mode is true */\n\n\n    filterDeveloperMode() {\n      return filter((value, index) => !this.settings.developerMode);\n    }\n\n    trackUrlChange(url) {\n      if (this.settings.pageTracking.autoTrackVirtualPages && !this.matchesExcludedRoute(url)) {\n        const clearedUrl = this.clearUrl(url);\n        let path;\n\n        if (this.settings.pageTracking.basePath.length) {\n          path = this.settings.pageTracking.basePath + clearedUrl;\n        } else {\n          path = this.tracker.prepareExternalUrl(clearedUrl);\n        }\n\n        this.pageTrack.next({\n          path\n        });\n      }\n    }\n    /**\n     * Use string literals or regular expressions to exclude routes\n     * from automatic pageview tracking.\n     *\n     * @param url location\n     */\n\n\n    matchesExcludedRoute(url) {\n      for (const excludedRoute of this.settings.pageTracking.excludedRoutes) {\n        const matchesRegex = excludedRoute instanceof RegExp && excludedRoute.test(url);\n\n        if (matchesRegex || url.indexOf(excludedRoute) !== -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Removes id's from tracked route.\n     *  EX: `/project/12981/feature` becomes `/project/feature`\n     *\n     * @param url current page path\n     */\n\n\n    clearUrl(url) {\n      if (this.settings.pageTracking.clearIds || this.settings.pageTracking.clearQueryParams || this.settings.pageTracking.clearHash) {\n        return url.split('/').map(part => this.settings.pageTracking.clearQueryParams ? part.split('?')[0] : part).map(part => this.settings.pageTracking.clearHash ? part.split('#')[0] : part).filter(part => !this.settings.pageTracking.clearIds || !part.match(this.settings.pageTracking.idsRegExp)).join('/');\n      }\n\n      return url;\n    }\n\n  }\n\n  Angulartics2.ɵfac = function Angulartics2_Factory(t) {\n    return new (t || Angulartics2)(i0.ɵɵinject(RouterlessTracking), i0.ɵɵinject(ANGULARTICS2_TOKEN));\n  };\n\n  Angulartics2.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2,\n    factory: Angulartics2.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Track Route changes for applications using Angular's\n * default router\n *\n * @link https://angular.io/api/router/Router\n */\n\n\nlet AngularRouterTracking = /*#__PURE__*/(() => {\n  class AngularRouterTracking {\n    constructor(router, location) {\n      this.router = router;\n      this.location = location;\n    }\n\n    trackLocation(settings) {\n      return this.router.events.pipe(filter(e => e instanceof NavigationEnd), filter(() => !settings.developerMode), map(e => {\n        return {\n          url: e.urlAfterRedirects\n        };\n      }), delay(0));\n    }\n\n    prepareExternalUrl(url) {\n      return this.location.prepareExternalUrl(url);\n    }\n\n  }\n\n  AngularRouterTracking.ɵfac = function AngularRouterTracking_Factory(t) {\n    return new (t || AngularRouterTracking)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Location));\n  };\n\n  AngularRouterTracking.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularRouterTracking,\n    factory: AngularRouterTracking.ɵfac,\n    providedIn: 'root'\n  });\n  return AngularRouterTracking;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2On = /*#__PURE__*/(() => {\n  class Angulartics2On {\n    constructor(elRef, angulartics2, renderer) {\n      this.elRef = elRef;\n      this.angulartics2 = angulartics2;\n      this.renderer = renderer;\n      this.angularticsProperties = {};\n    }\n\n    ngAfterContentInit() {\n      this.renderer.listen(this.elRef.nativeElement, this.angulartics2On || 'click', event => this.eventTrack(event));\n    }\n\n    eventTrack(event) {\n      const action = this.angularticsAction; // || this.inferEventName();\n\n      const properties = Object.assign(Object.assign({}, this.angularticsProperties), {\n        eventType: event.type\n      });\n\n      if (this.angularticsCategory) {\n        properties.category = this.angularticsCategory;\n      }\n\n      if (this.angularticsLabel) {\n        properties.label = this.angularticsLabel;\n      }\n\n      if (this.angularticsValue) {\n        properties.value = this.angularticsValue;\n      }\n\n      this.angulartics2.eventTrack.next({\n        action,\n        properties\n      });\n    }\n\n  }\n\n  Angulartics2On.ɵfac = function Angulartics2On_Factory(t) {\n    return new (t || Angulartics2On)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(Angulartics2), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  Angulartics2On.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Angulartics2On,\n    selectors: [[\"\", \"angulartics2On\", \"\"]],\n    inputs: {\n      angulartics2On: \"angulartics2On\",\n      angularticsAction: \"angularticsAction\",\n      angularticsCategory: \"angularticsCategory\",\n      angularticsLabel: \"angularticsLabel\",\n      angularticsValue: \"angularticsValue\",\n      angularticsProperties: \"angularticsProperties\"\n    }\n  });\n  return Angulartics2On;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2OnModule = /*#__PURE__*/(() => {\n  class Angulartics2OnModule {}\n\n  Angulartics2OnModule.ɵfac = function Angulartics2OnModule_Factory(t) {\n    return new (t || Angulartics2OnModule)();\n  };\n\n  Angulartics2OnModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: Angulartics2OnModule\n  });\n  Angulartics2OnModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return Angulartics2OnModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Module = /*#__PURE__*/(() => {\n  class Angulartics2Module {\n    static forRoot(settings = {}) {\n      return {\n        ngModule: Angulartics2Module,\n        providers: [{\n          provide: ANGULARTICS2_TOKEN,\n          useValue: {\n            settings\n          }\n        }, {\n          provide: RouterlessTracking,\n          useClass: AngularRouterTracking\n        }, Angulartics2]\n      };\n    }\n\n  }\n\n  Angulartics2Module.ɵfac = function Angulartics2Module_Factory(t) {\n    return new (t || Angulartics2Module)();\n  };\n\n  Angulartics2Module.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: Angulartics2Module\n  });\n  Angulartics2Module.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[Angulartics2OnModule]]\n  });\n  return Angulartics2Module;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2RouterlessModule = /*#__PURE__*/(() => {\n  class Angulartics2RouterlessModule {\n    static forRoot(settings = {}) {\n      return {\n        ngModule: Angulartics2RouterlessModule,\n        providers: [{\n          provide: ANGULARTICS2_TOKEN,\n          useValue: {\n            settings\n          }\n        }, RouterlessTracking, Angulartics2]\n      };\n    }\n\n  }\n\n  Angulartics2RouterlessModule.ɵfac = function Angulartics2RouterlessModule_Factory(t) {\n    return new (t || Angulartics2RouterlessModule)();\n  };\n\n  Angulartics2RouterlessModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: Angulartics2RouterlessModule\n  });\n  Angulartics2RouterlessModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[Angulartics2OnModule]]\n  });\n  return Angulartics2RouterlessModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2AdobeAnalytics = /*#__PURE__*/(() => {\n  class Angulartics2AdobeAnalytics {\n    constructor(angulartics2, location) {\n      this.angulartics2 = angulartics2;\n      this.location = location;\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      if (typeof s !== 'undefined' && s) {\n        s.clearVars();\n        s.t({\n          pageName: path\n        });\n      }\n    }\n    /**\n     * Track Event in Adobe Analytics\n     *\n     * @param action associated with the event\n     * @param properties action detials\n     *\n     * @link https://marketing.adobe.com/resources/help/en_US/sc/implement/js_implementation.html\n     */\n\n\n    eventTrack(action, properties) {\n      // TODO: make interface\n      // @property {string} properties.category\n      // @property {string} properties.label\n      // @property {number} properties.value\n      // @property {boolean} properties.noninteraction\n      if (!properties) {\n        properties = properties || {};\n      }\n\n      if (typeof s !== 'undefined' && s) {\n        if (typeof properties === 'object') {\n          this.setUserProperties(properties);\n        }\n\n        if (action) {\n          // if linkName property is passed, use that; otherwise, the action is the linkName\n          const linkName = properties['linkName'] ? properties['linkName'] : action; // note that 'this' should refer the link element, but we can't get that in this function. example:\n          // <a href=\"http://anothersite.com\" onclick=\"s.tl(this,'e','AnotherSite',null)\">\n          // if disableDelay property is passed, use that to turn off/on the 500ms delay; otherwise, it uses this\n\n          const disableDelay = !!properties['disableDelay'] ? true : this; // if action property is passed, use that; otherwise, the action remains unchanged\n\n          if (properties['action']) {\n            action = properties['action'];\n          }\n\n          this.setPageName();\n\n          if (action.toUpperCase() === 'DOWNLOAD') {\n            s.tl(disableDelay, 'd', linkName);\n          } else if (action.toUpperCase() === 'EXIT') {\n            s.tl(disableDelay, 'e', linkName);\n          } else {\n            s.tl(disableDelay, 'o', linkName);\n          }\n        }\n      }\n    }\n\n    setPageName() {\n      const path = this.location.path(true);\n      const hashNdx = path.indexOf('#');\n\n      if (hashNdx > 0 && hashNdx < path.length) {\n        s.pageName = path.substring(hashNdx + 1);\n      } else {\n        s.pageName = path;\n      }\n    }\n\n    setUserProperties(properties) {\n      if (typeof s !== 'undefined' && s) {\n        if (typeof properties === 'object') {\n          for (const key in properties) {\n            if (properties.hasOwnProperty(key)) {\n              s[key] = properties[key];\n            }\n          }\n        }\n      }\n    }\n\n  }\n\n  Angulartics2AdobeAnalytics.ɵfac = function Angulartics2AdobeAnalytics_Factory(t) {\n    return new (t || Angulartics2AdobeAnalytics)(i0.ɵɵinject(Angulartics2), i0.ɵɵinject(i2.Location));\n  };\n\n  Angulartics2AdobeAnalytics.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2AdobeAnalytics,\n    factory: Angulartics2AdobeAnalytics.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2AdobeAnalytics;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass AppInsightsDefaults {\n  constructor() {\n    this.userId = null;\n  }\n\n}\n\nlet Angulartics2AppInsights = /*#__PURE__*/(() => {\n  class Angulartics2AppInsights {\n    constructor(angulartics2, title, router) {\n      this.angulartics2 = angulartics2;\n      this.title = title;\n      this.router = router;\n      this.loadStartTime = null;\n      this.loadTime = null;\n      this.metrics = null;\n      this.dimensions = null;\n      this.measurements = null;\n\n      if (typeof appInsights === 'undefined') {\n        console.warn('appInsights not found');\n      }\n\n      const defaults = new AppInsightsDefaults(); // Set the default settings for this module\n\n      this.angulartics2.settings.appInsights = Object.assign(Object.assign({}, defaults), this.angulartics2.settings.appInsights);\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n      this.angulartics2.exceptionTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.exceptionTrack(x));\n      this.router.events.pipe(this.angulartics2.filterDeveloperMode(), filter(event => event instanceof NavigationStart)).subscribe(event => this.startTimer());\n      this.router.events.pipe(filter(event => event instanceof NavigationError || event instanceof NavigationEnd)).subscribe(error => this.stopTimer());\n    }\n\n    startTimer() {\n      this.loadStartTime = Date.now();\n      this.loadTime = null;\n    }\n\n    stopTimer() {\n      this.loadTime = Date.now() - this.loadStartTime;\n      this.loadStartTime = null;\n    }\n    /**\n     * Page Track in Baidu Analytics\n     *\n     * @param path - Location 'path'\n     *\n     * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackpageview\n     */\n\n\n    pageTrack(path) {\n      appInsights.trackPageView(this.title.getTitle(), path, this.dimensions, this.metrics, this.loadTime);\n    }\n    /**\n     * Log a user action or other occurrence.\n     *\n     * @param name Name to identify this event in the portal.\n     * @param properties Additional data used to filter events and metrics in the portal. Defaults to empty.\n     *\n     * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackevent\n     */\n\n\n    eventTrack(name, properties) {\n      appInsights.trackEvent(name, properties, this.measurements);\n    }\n    /**\n     * Exception Track Event in GA\n     *\n     * @param properties - Comprised of the mandatory fields 'appId' (string), 'appName' (string) and 'appVersion' (string) and\n     * optional fields 'fatal' (boolean) and 'description' (string), error\n     *\n     * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackexception\n     */\n\n\n    exceptionTrack(properties) {\n      const description = properties.event || properties.description || properties;\n      appInsights.trackException(description);\n    }\n    /**\n     * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#setauthenticatedusercontext\n     */\n\n\n    setUsername(userId) {\n      this.angulartics2.settings.appInsights.userId = userId;\n      appInsights.setAuthenticatedUserContext(userId);\n    }\n\n    setUserProperties(properties) {\n      if (properties.userId) {\n        this.angulartics2.settings.appInsights.userId = properties.userId;\n      }\n\n      if (properties.accountId) {\n        appInsights.setAuthenticatedUserContext(this.angulartics2.settings.appInsights.userId, properties.accountId);\n      } else {\n        appInsights.setAuthenticatedUserContext(this.angulartics2.settings.appInsights.userId);\n      }\n    }\n\n  }\n\n  Angulartics2AppInsights.ɵfac = function Angulartics2AppInsights_Factory(t) {\n    return new (t || Angulartics2AppInsights)(i0.ɵɵinject(Angulartics2), i0.ɵɵinject(i2$1.Title), i0.ɵɵinject(i1.Router));\n  };\n\n  Angulartics2AppInsights.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2AppInsights,\n    factory: Angulartics2AppInsights.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2AppInsights;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2BaiduAnalytics = /*#__PURE__*/(() => {\n  class Angulartics2BaiduAnalytics {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n\n      if (typeof _hmt === 'undefined') {\n        _hmt = [];\n      } else {\n        _hmt.push(['_setAutoPageview', false]);\n      }\n\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n    /**\n     * Page Track in Baidu Analytics\n     *\n     * @param path Required url 'path'\n     *\n     * @link http://tongji.baidu.com/open/api/more?p=ref_trackPageview\n     */\n\n\n    pageTrack(path) {\n      if (typeof _hmt !== 'undefined' && _hmt) {\n        _hmt.push(['_trackPageview', path]);\n      }\n    }\n    /**\n     * Track Event in Baidu Analytics\n     *\n     * @param action Name associated with the event\n     * @param properties Comprised of:\n     *  - 'category' (string)\n     *  - 'opt_label' (string)\n     *  - 'opt_value' (string)\n     *\n     * @link http://tongji.baidu.com/open/api/more?p=ref_trackEvent\n     */\n\n\n    eventTrack(action, properties) {\n      // baidu analytics requires category\n      if (!properties || !properties.category) {\n        properties = properties || {};\n        properties.category = 'Event';\n        properties.opt_label = 'default';\n        properties.opt_value = 'default';\n      }\n\n      if (typeof _hmt !== 'undefined' && _hmt) {\n        _hmt.push(['_trackEvent', properties.category, action, properties.opt_label, properties.opt_value]);\n      }\n    }\n\n    setUsername(userId) {\n      // set default custom variables name to 'identity' and 'value'\n      _hmt.push(['_setCustomVar', 1, 'identity', userId]);\n    }\n\n    setUserProperties(properties) {\n      _hmt.push(['_setCustomVar', 2, 'user', JSON.stringify(properties)]);\n    }\n\n  }\n\n  Angulartics2BaiduAnalytics.ɵfac = function Angulartics2BaiduAnalytics_Factory(t) {\n    return new (t || Angulartics2BaiduAnalytics)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2BaiduAnalytics.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2BaiduAnalytics,\n    factory: Angulartics2BaiduAnalytics.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2BaiduAnalytics;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst facebookEventList = ['ViewContent', 'Search', 'AddToCart', 'AddToWishlist', 'InitiateCheckout', 'AddPaymentInfo', 'Purchase', 'Lead', 'CompleteRegistration'];\nlet Angulartics2Facebook = /*#__PURE__*/(() => {\n  class Angulartics2Facebook {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n    }\n\n    startTracking() {\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n    /**\n     * Send interactions to the Pixel, i.e. for event tracking in Pixel\n     *\n     * @param action action associated with the event\n     */\n\n\n    eventTrack(action, properties = {}) {\n      if (typeof fbq === 'undefined') {\n        return;\n      }\n\n      if (facebookEventList.indexOf(action) === -1) {\n        return fbq('trackCustom', action, properties);\n      }\n\n      return fbq('track', action, properties);\n    }\n\n  }\n\n  Angulartics2Facebook.ɵfac = function Angulartics2Facebook_Factory(t) {\n    return new (t || Angulartics2Facebook)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Facebook.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Facebook,\n    factory: Angulartics2Facebook.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Facebook;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass GoogleAnalyticsDefaults {\n  constructor() {\n    this.additionalAccountNames = [];\n    this.userId = null;\n    this.transport = '';\n    this.anonymizeIp = false;\n  }\n\n}\n\nlet Angulartics2GoogleAnalytics = /*#__PURE__*/(() => {\n  class Angulartics2GoogleAnalytics {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.dimensionsAndMetrics = [];\n      const defaults = new GoogleAnalyticsDefaults(); // Set the default settings for this module\n\n      this.angulartics2.settings.ga = Object.assign(Object.assign({}, defaults), this.angulartics2.settings.ga);\n      this.settings = this.angulartics2.settings.ga;\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n      this.angulartics2.exceptionTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.exceptionTrack(x));\n      this.angulartics2.userTimings.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.userTimings(x));\n    }\n\n    pageTrack(path) {\n      if (typeof _gaq !== 'undefined' && _gaq) {\n        _gaq.push(['_trackPageview', path]);\n\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          _gaq.push([accountName + '._trackPageview', path]);\n        }\n      }\n\n      if (typeof ga !== 'undefined' && ga) {\n        if (this.angulartics2.settings.ga.userId) {\n          ga('set', '&uid', this.angulartics2.settings.ga.userId);\n\n          for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n            ga(accountName + '.set', '&uid', this.angulartics2.settings.ga.userId);\n          }\n        }\n\n        if (this.angulartics2.settings.ga.anonymizeIp) {\n          ga('set', 'anonymizeIp', true);\n\n          for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n            ga(accountName + '.set', 'anonymizeIp', true);\n          }\n        }\n\n        ga('send', 'pageview', path);\n\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.send', 'pageview', path);\n        }\n      }\n    }\n    /**\n     * Track Event in GA\n     *\n     * @param action Associated with the event\n     * @param properties Comprised of:\n     *  - category (string) and optional\n     *  - label (string)\n     *  - value (integer)\n     *  - noninteraction (boolean)\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide#SettingUpEventTracking\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n     */\n\n\n    eventTrack(action, properties) {\n      // Google Analytics requires an Event Category\n      if (!properties || !properties.category) {\n        properties = properties || {};\n        properties.category = 'Event';\n      } // GA requires that eventValue be an integer, see:\n      // https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#eventValue\n      // https://github.com/luisfarzati/angulartics/issues/81\n\n\n      if (properties.value) {\n        const parsed = parseInt(properties.value, 10);\n        properties.value = isNaN(parsed) ? 0 : parsed;\n      }\n\n      if (typeof ga !== 'undefined') {\n        const eventOptions = Object.assign({\n          eventCategory: properties.category,\n          eventAction: action,\n          eventLabel: properties.label,\n          eventValue: properties.value,\n          nonInteraction: properties.noninteraction,\n          page: properties.page || location.hash.substring(1) || location.pathname,\n          userId: this.angulartics2.settings.ga.userId,\n          hitCallback: properties.hitCallback\n        }, this.angulartics2.settings.ga.transport && {\n          transport: this.angulartics2.settings.ga.transport\n        }); // add custom dimensions and metrics\n\n        this.setDimensionsAndMetrics(properties);\n        ga('send', 'event', eventOptions);\n\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.send', 'event', eventOptions);\n        }\n      } else if (typeof _gaq !== 'undefined') {\n        _gaq.push(['_trackEvent', properties.category, action, properties.label, properties.value, properties.noninteraction]);\n      }\n    }\n    /**\n     * Exception Track Event in GA\n     *\n     * @param properties Comprised of the optional fields:\n     *  - fatal (string)\n     *  - description (string)\n     *\n     * @https://developers.google.com/analytics/devguides/collection/analyticsjs/exceptions\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n     */\n\n\n    exceptionTrack(properties) {\n      if (properties.fatal === undefined) {\n        console.log('No \"fatal\" provided, sending with fatal=true');\n        properties.fatal = true;\n      }\n\n      properties.exDescription = properties.description;\n      const eventOptions = {\n        exFatal: properties.fatal,\n        exDescription: properties.description\n      };\n      ga('send', 'exception', eventOptions);\n\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'exception', eventOptions);\n      }\n    }\n    /**\n     * User Timings Event in GA\n     *\n     * @param properties Comprised of the mandatory fields:\n     *  - timingCategory (string)\n     *  - timingVar (string)\n     *  - timingValue (number)\n     * Properties can also have the optional fields:\n     *  - timingLabel (string)\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings\n     */\n\n\n    userTimings(properties) {\n      if (!properties || !properties.timingCategory || !properties.timingVar || !properties.timingValue) {\n        console.error('Properties timingCategory, timingVar, and timingValue are required to be set.');\n        return;\n      }\n\n      if (typeof ga !== 'undefined') {\n        ga('send', 'timing', properties);\n\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.send', 'timing', properties);\n        }\n      }\n    }\n\n    setUsername(userId) {\n      this.angulartics2.settings.ga.userId = userId;\n\n      if (typeof ga === 'undefined') {\n        return;\n      }\n\n      ga('set', 'userId', userId);\n    }\n\n    setUserProperties(properties) {\n      this.setDimensionsAndMetrics(properties);\n    }\n\n    setDimensionsAndMetrics(properties) {\n      if (typeof ga === 'undefined') {\n        return;\n      } // clean previously used dimensions and metrics that will not be overriden\n\n\n      this.dimensionsAndMetrics.forEach(elem => {\n        if (!properties.hasOwnProperty(elem)) {\n          ga('set', elem, undefined);\n          this.angulartics2.settings.ga.additionalAccountNames.forEach(accountName => {\n            ga(`${accountName}.set`, elem, undefined);\n          });\n        }\n      });\n      this.dimensionsAndMetrics = []; // add custom dimensions and metrics\n\n      Object.keys(properties).forEach(key => {\n        if (key.lastIndexOf('dimension', 0) === 0 || key.lastIndexOf('metric', 0) === 0) {\n          ga('set', key, properties[key]);\n          this.angulartics2.settings.ga.additionalAccountNames.forEach(accountName => {\n            ga(`${accountName}.set`, key, properties[key]);\n          });\n          this.dimensionsAndMetrics.push(key);\n        }\n      });\n    }\n\n  }\n\n  Angulartics2GoogleAnalytics.ɵfac = function Angulartics2GoogleAnalytics_Factory(t) {\n    return new (t || Angulartics2GoogleAnalytics)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2GoogleAnalytics.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2GoogleAnalytics,\n    factory: Angulartics2GoogleAnalytics.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2GoogleAnalytics;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2GoogleAnalyticsEnhancedEcommerce = /*#__PURE__*/(() => {\n  class Angulartics2GoogleAnalyticsEnhancedEcommerce {\n    /**\n     * Add impression in GA enhanced ecommerce tracking\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#measuring-activities\n     */\n    ecAddImpression(properties) {\n      ga('ec:addImpression', properties);\n    }\n    /**\n     * Add product in GA enhanced ecommerce tracking\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce\n     */\n\n\n    ecAddProduct(product) {\n      ga('ec:addProduct', product);\n    }\n    /**\n     * Set action in GA enhanced ecommerce tracking\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce\n     */\n\n\n    ecSetAction(action, properties) {\n      ga('ec:setAction', action, properties);\n    }\n\n  }\n\n  Angulartics2GoogleAnalyticsEnhancedEcommerce.ɵfac = function Angulartics2GoogleAnalyticsEnhancedEcommerce_Factory(t) {\n    return new (t || Angulartics2GoogleAnalyticsEnhancedEcommerce)();\n  };\n\n  Angulartics2GoogleAnalyticsEnhancedEcommerce.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2GoogleAnalyticsEnhancedEcommerce,\n    factory: Angulartics2GoogleAnalyticsEnhancedEcommerce.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2GoogleAnalyticsEnhancedEcommerce;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass GoogleTagManagerDefaults {\n  constructor() {\n    this.userId = null;\n  }\n\n}\n\nlet Angulartics2GoogleTagManager = /*#__PURE__*/(() => {\n  class Angulartics2GoogleTagManager {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2; // The dataLayer needs to be initialized\n\n      if (typeof dataLayer !== 'undefined' && dataLayer) {\n        dataLayer = window.dataLayer = window.dataLayer || [];\n      }\n\n      const defaults = new GoogleTagManagerDefaults(); // Set the default settings for this module\n\n      this.angulartics2.settings.gtm = Object.assign(Object.assign({}, defaults), this.angulartics2.settings.gtm);\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n      this.angulartics2.exceptionTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.exceptionTrack(x));\n    }\n\n    pageTrack(path) {\n      this.pushLayer({\n        event: 'Page View',\n        'content-name': path,\n        userId: this.angulartics2.settings.gtm.userId\n      });\n    }\n    /**\n     * Send Data Layer\n     *\n     * @layer data layer object\n     */\n\n\n    pushLayer(layer) {\n      if (typeof dataLayer !== 'undefined' && dataLayer) {\n        dataLayer.push(layer);\n      }\n    }\n    /**\n     * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics\n     *\n     * @param action associated with the event\n     */\n\n\n    eventTrack(action, properties) {\n      // TODO: make interface\n      //  @param {string} properties.category\n      //  @param {string} [properties.label]\n      //  @param {number} [properties.value]\n      //  @param {boolean} [properties.noninteraction]\n      // Set a default GTM category\n      properties = properties || {};\n      this.pushLayer(Object.assign({\n        event: properties.event || 'interaction',\n        target: properties.category || 'Event',\n        action,\n        label: properties.label,\n        value: properties.value,\n        interactionType: properties.noninteraction,\n        userId: this.angulartics2.settings.gtm.userId\n      }, properties.gtmCustom));\n    }\n    /**\n     * Exception Track Event in GTM\n     *\n     */\n\n\n    exceptionTrack(properties) {\n      // TODO: make interface\n      //  @param {Object} properties\n      //  @param {string} properties.appId\n      //  @param {string} properties.appName\n      //  @param {string} properties.appVersion\n      //  @param {string} [properties.description]\n      //  @param {boolean} [properties.fatal]\n      if (!properties || !properties.appId || !properties.appName || !properties.appVersion) {\n        console.error('Must be setted appId, appName and appVersion.');\n        return;\n      }\n\n      if (properties.fatal === undefined) {\n        console.log('No \"fatal\" provided, sending with fatal=true');\n        properties.exFatal = true;\n      }\n\n      properties.exDescription = properties.event ? properties.event.stack : properties.description;\n      this.eventTrack(`Exception thrown for ${properties.appName} <${properties.appId}@${properties.appVersion}>`, {\n        category: 'Exception',\n        label: properties.exDescription\n      });\n    }\n    /**\n     * Set userId for use with Universal Analytics User ID feature\n     *\n     * @param userId used to identify user cross-device in Google Analytics\n     */\n\n\n    setUsername(userId) {\n      this.angulartics2.settings.gtm.userId = userId;\n    }\n\n  }\n\n  Angulartics2GoogleTagManager.ɵfac = function Angulartics2GoogleTagManager_Factory(t) {\n    return new (t || Angulartics2GoogleTagManager)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2GoogleTagManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2GoogleTagManager,\n    factory: Angulartics2GoogleTagManager.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2GoogleTagManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass GoogleGlobalSiteTagDefaults {\n  constructor() {\n    this.trackingIds = [];\n\n    if (typeof ga !== 'undefined' && ga) {\n      // See: https://developers.google.com/analytics/devguides/collection/analyticsjs/ga-object-methods-reference\n      ga(() => {\n        ga.getAll().forEach(tracker => {\n          const id = tracker.get('trackingId'); // If set both in forRoot and HTML page, we want to avoid duplicates\n\n          if (id !== undefined && this.trackingIds.indexOf(id) === -1) {\n            this.trackingIds.push(id);\n          }\n        });\n      });\n    }\n  }\n\n}\n\nlet Angulartics2GoogleGlobalSiteTag = /*#__PURE__*/(() => {\n  class Angulartics2GoogleGlobalSiteTag {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.dimensionsAndMetrics = {};\n      const defaults = new GoogleGlobalSiteTagDefaults(); // Set the default settings for this module\n\n      this.angulartics2.settings.gst = Object.assign(Object.assign({}, defaults), this.angulartics2.settings.gst);\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n      this.angulartics2.exceptionTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.exceptionTrack(x));\n      this.angulartics2.userTimings.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.userTimings(this.convertTimings(x)));\n      this.angulartics2.setUsername.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.setUserProperties(x));\n    }\n    /**\n     * Manually track page view, see:\n     *\n     * https://developers.google.com/analytics/devguides/collection/gtagjs/single-page-applications#tracking_virtual_pageviews\n     *\n     * @param path relative url\n     */\n\n\n    pageTrack(path) {\n      if (typeof gtag !== 'undefined' && gtag) {\n        const params = Object.assign({\n          page_path: path,\n          page_location: window.location.protocol + '//' + window.location.host + path\n        }, this.dimensionsAndMetrics); // Custom map must be reset with all config to stay valid.\n\n        if (this.angulartics2.settings.gst.customMap) {\n          params.custom_map = this.angulartics2.settings.gst.customMap;\n        }\n\n        if (this.angulartics2.settings.gst.userId) {\n          params.user_id = this.angulartics2.settings.gst.userId;\n        }\n\n        if (this.angulartics2.settings.gst.anonymizeIp) {\n          params.anonymize_ip = this.angulartics2.settings.gst.anonymizeIp;\n        }\n\n        for (const id of this.angulartics2.settings.gst.trackingIds) {\n          gtag('config', id, params);\n        }\n      }\n    }\n    /**\n     * Send interactions to gtag, i.e. for event tracking in Google Analytics. See:\n     *\n     * https://developers.google.com/analytics/devguides/collection/gtagjs/events\n     *\n     * @param action associated with the event\n     */\n\n\n    eventTrack(action, properties = {}) {\n      this.eventTrackInternal(action, Object.assign({\n        event_category: properties.category || 'interaction',\n        event_label: properties.label,\n        value: properties.value,\n        non_interaction: properties.noninteraction\n      }, properties.gstCustom));\n    }\n    /**\n     * Exception Track Event in GST. See:\n     *\n     * https://developers.google.com/analytics/devguides/collection/gtagjs/exceptions\n     *\n     */\n\n\n    exceptionTrack(properties) {\n      // TODO: make interface\n      //  @param {Object} properties\n      //  @param {string} [properties.description]\n      //  @param {boolean} [properties.fatal]\n      if (properties.fatal === undefined) {\n        console.log('No \"fatal\" provided, sending with fatal=true');\n        properties.fatal = true;\n      }\n\n      properties.exDescription = properties.event ? properties.event.stack : properties.description;\n      this.eventTrack('exception', {\n        gstCustom: Object.assign({\n          description: properties.exDescription,\n          fatal: properties.fatal\n        }, properties.gstCustom)\n      });\n    }\n    /**\n     * User Timings Event in GST.\n     *\n     * @param properties Comprised of the mandatory fields:\n     *  - name (string)\n     *  - value (number - integer)\n     * Properties can also have the optional fields:\n     *  - category (string)\n     *  - label (string)\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/gtagjs/user-timings\n     */\n\n\n    userTimings(properties) {\n      if (!properties) {\n        console.error('User timings - \"properties\" parameter is required to be set.');\n        return;\n      }\n\n      this.eventTrackInternal('timing_complete', {\n        name: properties.name,\n        value: properties.value,\n        event_category: properties.category,\n        event_label: properties.label\n      });\n    }\n\n    convertTimings(properties) {\n      return {\n        name: properties.timingVar,\n        value: properties.timingValue,\n        category: properties.timingCategory,\n        label: properties.timingLabel\n      };\n    }\n\n    setUsername(userId) {\n      this.angulartics2.settings.gst.userId = userId;\n\n      if (typeof gtag !== 'undefined' && gtag) {\n        gtag('set', {\n          user_id: typeof userId === 'string' || !userId ? userId : userId.userId\n        });\n      }\n    }\n\n    setUserProperties(properties) {\n      this.setDimensionsAndMetrics(properties);\n    }\n\n    setDimensionsAndMetrics(properties) {\n      // We want the dimensions and metrics to accumulate, so we merge with previous value\n      this.dimensionsAndMetrics = Object.assign(Object.assign({}, this.dimensionsAndMetrics), properties); // Remove properties that are null or undefined\n\n      Object.keys(this.dimensionsAndMetrics).forEach(key => {\n        const val = this.dimensionsAndMetrics[key];\n\n        if (val === undefined || val === null) {\n          delete this.dimensionsAndMetrics[key];\n        }\n      });\n\n      if (typeof gtag !== 'undefined' && gtag) {\n        gtag('set', this.dimensionsAndMetrics);\n      }\n    }\n\n    eventTrackInternal(action, properties = {}) {\n      this.cleanProperties(properties);\n\n      if (typeof gtag !== 'undefined' && gtag) {\n        gtag('event', action, properties);\n      }\n    }\n\n    cleanProperties(properties) {\n      // GA requires that eventValue be an non-negative integer, see:\n      // https://developers.google.com/analytics/devguides/collection/gtagjs/events\n      if (properties.value) {\n        const parsed = parseInt(properties.value, 10);\n        properties.value = isNaN(parsed) ? 0 : parsed;\n      }\n    }\n\n  }\n\n  Angulartics2GoogleGlobalSiteTag.ɵfac = function Angulartics2GoogleGlobalSiteTag_Factory(t) {\n    return new (t || Angulartics2GoogleGlobalSiteTag)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2GoogleGlobalSiteTag.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2GoogleGlobalSiteTag,\n    factory: Angulartics2GoogleGlobalSiteTag.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2GoogleGlobalSiteTag;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Hubspot = /*#__PURE__*/(() => {\n  class Angulartics2Hubspot {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      if (typeof _hsq !== 'undefined') {\n        _hsq.push(['setPath', path]);\n\n        _hsq.push(['trackPageView']);\n      }\n    }\n\n    eventTrack(action, properties) {\n      if (typeof _hsq !== 'undefined') {\n        _hsq.push(['trackEvent', properties]);\n      }\n    }\n\n    setUserProperties(properties) {\n      if (typeof _hsq !== 'undefined') {\n        _hsq.push(['identify', properties]);\n      }\n    }\n\n  }\n\n  Angulartics2Hubspot.ɵfac = function Angulartics2Hubspot_Factory(t) {\n    return new (t || Angulartics2Hubspot)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Hubspot.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Hubspot,\n    factory: Angulartics2Hubspot.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Hubspot;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Kissmetrics = /*#__PURE__*/(() => {\n  class Angulartics2Kissmetrics {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n\n      if (typeof _kmq === 'undefined') {\n        _kmq = [];\n      }\n\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      _kmq.push(['record', 'Pageview', {\n        Page: path\n      }]);\n    }\n\n    eventTrack(action, properties) {\n      _kmq.push(['record', action, properties]);\n    }\n\n    setUsername(userId) {\n      _kmq.push(['identify', userId]);\n    }\n\n    setUserProperties(properties) {\n      _kmq.push(['set', properties]);\n    }\n\n  }\n\n  Angulartics2Kissmetrics.ɵfac = function Angulartics2Kissmetrics_Factory(t) {\n    return new (t || Angulartics2Kissmetrics)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Kissmetrics.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Kissmetrics,\n    factory: Angulartics2Kissmetrics.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Kissmetrics;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2LaunchByAdobe = /*#__PURE__*/(() => {\n  class Angulartics2LaunchByAdobe {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.payload = {};\n\n      if ('undefined' === typeof _satellite) {\n        console.warn('Launch not found!');\n      }\n\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    setUsername(userId) {\n      if ('undefined' !== typeof userId && userId) {\n        this.payload.userId = userId;\n      }\n    }\n\n    setUserProperties(properties) {\n      if ('undefined' !== typeof properties && properties) {\n        this.payload.properties = properties;\n      }\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      this.payload = this.payload || {};\n      this.payload.path = path;\n\n      if ('undefined' !== typeof _satellite && _satellite) {\n        _satellite.track('pageTrack', this.payload);\n      }\n    }\n    /**\n     * @param action associated with the event\n     * @param properties associated with the event\n     */\n\n\n    eventTrack(action, properties) {\n      properties = properties || {}; // add properties to payload\n\n      this.payload.action = action;\n      this.payload.eventProperties = properties;\n\n      if ('undefined' !== typeof _satellite && _satellite) {\n        _satellite.track('eventTrack', this.payload);\n      }\n    }\n\n  }\n\n  Angulartics2LaunchByAdobe.ɵfac = function Angulartics2LaunchByAdobe_Factory(t) {\n    return new (t || Angulartics2LaunchByAdobe)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2LaunchByAdobe.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2LaunchByAdobe,\n    factory: Angulartics2LaunchByAdobe.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2LaunchByAdobe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Mixpanel = /*#__PURE__*/(() => {\n  class Angulartics2Mixpanel {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n      this.angulartics2.setUserPropertiesOnce.subscribe(x => this.setUserPropertiesOnce(x));\n      this.angulartics2.setSuperProperties.subscribe(x => this.setSuperProperties(x));\n      this.angulartics2.setSuperPropertiesOnce.subscribe(x => this.setSuperPropertiesOnce(x));\n      this.angulartics2.setAlias.subscribe(x => this.setAlias(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        mixpanel.track('Page Viewed', {\n          page: path\n        });\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        mixpanel.track(action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUsername(userId) {\n      try {\n        mixpanel.identify(userId);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserProperties(properties) {\n      try {\n        mixpanel.people.set(properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserPropertiesOnce(properties) {\n      try {\n        mixpanel.people.set_once(properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setSuperProperties(properties) {\n      try {\n        mixpanel.register(properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setSuperPropertiesOnce(properties) {\n      try {\n        mixpanel.register_once(properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setAlias(alias) {\n      try {\n        mixpanel.alias(alias);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Mixpanel.ɵfac = function Angulartics2Mixpanel_Factory(t) {\n    return new (t || Angulartics2Mixpanel)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Mixpanel.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Mixpanel,\n    factory: Angulartics2Mixpanel.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Mixpanel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Pyze = /*#__PURE__*/(() => {\n  class Angulartics2Pyze {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUsername.subscribe(x => this.setUserId(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.postTraits(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        Pyze.postPageView('Page Viewed', {\n          page: path\n        });\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        PyzeEvents.postCustomEventWithAttributes(action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserId(userId) {\n      try {\n        PyzeIdentity.setUserIdentifier(userId);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    postTraits(properties) {\n      try {\n        PyzeIdentity.postTraits(properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Pyze.ɵfac = function Angulartics2Pyze_Factory(t) {\n    return new (t || Angulartics2Pyze)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Pyze.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Pyze,\n    factory: Angulartics2Pyze.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Pyze;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Matomo = /*#__PURE__*/(() => {\n  class Angulartics2Matomo {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n\n      if (typeof _paq === 'undefined') {\n        console.warn('Matomo not found');\n      }\n\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path, title) {\n      try {\n        if (!window.location.origin) {\n          window.location.origin = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n        }\n\n        _paq.push(['setDocumentTitle', title || window.document.title]);\n\n        _paq.push(['setCustomUrl', window.location.origin + path]);\n\n        _paq.push(['trackPageView']);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    resetUser() {\n      try {\n        _paq.push(['appendToTrackingUrl', 'new_visit=1']); // (1) forces a new visit\n\n\n        _paq.push(['deleteCookies']); // (2) deletes existing tracking cookies to start the new visit\n\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Track a basic event in Matomo, or send an ecommerce event.\n     *\n     * @param action A string corresponding to the type of event that needs to be tracked.\n     * @param properties The properties that need to be logged with the event.\n     */\n\n\n    eventTrack(action, properties) {\n      let params = [];\n\n      switch (action) {\n        /**\n         * @description Sets the current page view as a product or category page view. When you call\n         * setEcommerceView it must be followed by a call to trackPageView to record the product or\n         * category page view.\n         *\n         * @link https://matomo.org/docs/ecommerce-analytics/#tracking-product-page-views-category-page-views-optional\n         * @link https://developer.matomo.org/api-reference/tracking-javascript#ecommerce\n         *\n         * @property productSKU (required) SKU: Product unique identifier\n         * @property productName (optional) Product name\n         * @property categoryName (optional) Product category, or array of up to 5 categories\n         * @property price (optional) Product Price as displayed on the page\n         */\n        case 'setEcommerceView':\n          params = ['setEcommerceView', properties.productSKU, properties.productName, properties.categoryName, properties.price];\n          break;\n\n        /**\n         * @description Adds a product into the ecommerce order. Must be called for each product in\n         * the order.\n         *\n         * @link https://matomo.org/docs/ecommerce-analytics/#tracking-ecommerce-orders-items-purchased-required\n         * @link https://developer.matomo.org/api-reference/tracking-javascript#ecommerce\n         *\n         * @property productSKU (required) SKU: Product unique identifier\n         * @property productName (optional) Product name\n         * @property categoryName (optional) Product category, or array of up to 5 categories\n         * @property price (recommended) Product price\n         * @property quantity (optional, default to 1) Product quantity\n         */\n\n        case 'addEcommerceItem':\n          params = ['addEcommerceItem', properties.productSKU, properties.productName, properties.productCategory, properties.price, properties.quantity];\n          break;\n\n        /**\n         * @description Tracks a shopping cart. Call this javascript function every time a user is\n         * adding, updating or deleting a product from the cart.\n         *\n         * @link https://matomo.org/docs/ecommerce-analytics/#tracking-add-to-cart-items-added-to-the-cart-optional\n         * @link https://developer.matomo.org/api-reference/tracking-javascript#ecommerce\n         *\n         * @property grandTotal (required) Cart amount\n         */\n\n        case 'trackEcommerceCartUpdate':\n          params = ['trackEcommerceCartUpdate', properties.grandTotal];\n          break;\n\n        /**\n         * @description Tracks an Ecommerce order, including any ecommerce item previously added to\n         * the order. orderId and grandTotal (ie. revenue) are required parameters.\n         *\n         * @link https://matomo.org/docs/ecommerce-analytics/#tracking-ecommerce-orders-items-purchased-required\n         * @link https://developer.matomo.org/api-reference/tracking-javascript#ecommerce\n         *\n         * @property orderId (required) Unique Order ID\n         * @property grandTotal (required) Order Revenue grand total (includes tax, shipping, and subtracted discount)\n         * @property subTotal (optional) Order sub total (excludes shipping)\n         * @property tax (optional) Tax amount\n         * @property shipping (optional) Shipping amount\n         * @property discount (optional) Discount offered (set to false for unspecified parameter)\n         */\n\n        case 'trackEcommerceOrder':\n          params = ['trackEcommerceOrder', properties.orderId, properties.grandTotal, properties.subTotal, properties.tax, properties.shipping, properties.discount];\n          break;\n\n        /**\n         * @description To manually trigger an outlink\n         *\n         * @link https://matomo.org/docs/tracking-goals-web-analytics/\n         * @link https://developer.matomo.org/guides/tracking-javascript-guide#tracking-a-click-as-an-outlink-via-css-or-javascript\n         *\n         * @property url (required) link url\n         * @property linkType (optional) type of link\n         */\n\n        case 'trackLink':\n          params = ['trackLink', properties.url, properties.linkType];\n          break;\n\n        /**\n         * @description Tracks an Ecommerce goal\n         *\n         * @link https://matomo.org/docs/tracking-goals-web-analytics/\n         * @link https://developer.matomo.org/guides/tracking-javascript-guide#manually-trigger-goal-conversions\n         *\n         * @property goalId (required) Unique Goal ID\n         * @property value (optional) passed to goal tracking\n         */\n\n        case 'trackGoal':\n          params = ['trackGoal', properties.goalId, properties.value];\n          break;\n\n        /**\n         * @description Tracks a site search\n         *\n         * @link https://matomo.org/docs/site-search/\n         * @link https://developer.matomo.org/guides/tracking-javascript-guide#internal-search-tracking\n         *\n         * @property keyword (required) Keyword searched for\n         * @property category (optional) Search category\n         * @property searchCount (optional) Number of results\n         */\n\n        case 'trackSiteSearch':\n          params = ['trackSiteSearch', properties.keyword, properties.category, properties.searchCount];\n          break;\n\n        /**\n         * @description Logs an event with an event category (Videos, Music, Games...), an event\n         * action (Play, Pause, Duration, Add Playlist, Downloaded, Clicked...), and an optional\n         * event name and optional numeric value.\n         *\n         * @link https://matomo.org/docs/event-tracking/\n         * @link https://developer.matomo.org/api-reference/tracking-javascript#using-the-tracker-object\n         *\n         * @property category\n         * @property action\n         * @property name (optional, recommended)\n         * @property value (optional)\n         */\n\n        default:\n          // PAQ requires that eventValue be an integer, see: http://matomo.org/docs/event-tracking\n          if (properties.value) {\n            const parsed = parseInt(properties.value, 10);\n            properties.value = isNaN(parsed) ? 0 : parsed;\n          }\n\n          params = ['trackEvent', properties.category, action, properties.name || properties.label, properties.value];\n      }\n\n      try {\n        _paq.push(params);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUsername(userId) {\n      try {\n        _paq.push(['setUserId', userId]);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets custom dimensions if at least one property has the key \"dimension<n>\",\n     * e.g. dimension10. If there are custom dimensions, any other property is ignored.\n     *\n     * If there are no custom dimensions in the given properties object, the properties\n     * object is saved as a custom variable.\n     *\n     * If in doubt, prefer custom dimensions.\n     * @link https://matomo.org/docs/custom-variables/\n     */\n\n\n    setUserProperties(properties) {\n      const dimensions = this.setCustomDimensions(properties);\n\n      try {\n        if (dimensions.length === 0) {\n          _paq.push(['setCustomVariable', properties.index, properties.name, properties.value, properties.scope]);\n        }\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * If you created a custom variable and then decide to remove this variable from\n     * a visit or page view, you can use deleteCustomVariable.\n     *\n     * @link https://developer.matomo.org/guides/tracking-javascript-guide#deleting-a-custom-variable\n     */\n\n\n    deletedUserProperties(properties) {\n      try {\n        _paq.push(['deleteCustomVariable', properties.index, properties.scope]);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setCustomDimensions(properties) {\n      const dimensionRegex = /dimension[1-9]\\d*/;\n      const dimensions = Object.keys(properties).filter(key => dimensionRegex.exec(key));\n      dimensions.forEach(dimension => {\n        const number = Number(dimension.substr(9));\n\n        _paq.push(['setCustomDimension', number, properties[dimension]]);\n      });\n      return dimensions;\n    }\n\n  }\n\n  Angulartics2Matomo.ɵfac = function Angulartics2Matomo_Factory(t) {\n    return new (t || Angulartics2Matomo)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Matomo.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Matomo,\n    factory: Angulartics2Matomo.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Matomo;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Segment = /*#__PURE__*/(() => {\n  class Angulartics2Segment {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n      this.angulartics2.setUserPropertiesOnce.subscribe(x => this.setUserProperties(x));\n      this.angulartics2.setAlias.subscribe(x => this.setAlias(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n    /**\n     * https://segment.com/docs/libraries/analytics.js/#page\n     *\n     * analytics.page([category], [name], [properties], [options], [callback]);\n     */\n\n\n    pageTrack(path) {\n      // TODO : Support optional parameters where the parameter order and type changes their meaning\n      try {\n        analytics.page(path);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * https://segment.com/docs/libraries/analytics.js/#track\n     *\n     * analytics.track(event, [properties], [options], [callback]);\n     */\n\n\n    eventTrack(action, properties) {\n      try {\n        analytics.track(action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * https://segment.com/docs/libraries/analytics.js/#identify\n     *\n     * analytics.identify([userId], [traits], [options], [callback]);\n     */\n\n\n    setUserProperties(properties) {\n      try {\n        if (properties.userId) {\n          analytics.identify(properties.userId, properties);\n        } else {\n          analytics.identify(properties);\n        }\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#reset--logout\n     *\n     * analytics.reset();\n     */\n\n\n    unsetUserProperties() {\n      analytics.reset();\n    }\n    /**\n     * https://segment.com/docs/libraries/analytics.js/#alias\n     *\n     * analytics.alias(userId, previousId, options, callback);\n     */\n\n\n    setAlias(alias) {\n      try {\n        analytics.alias(alias);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Segment.ɵfac = function Angulartics2Segment_Factory(t) {\n    return new (t || Angulartics2Segment)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Segment.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Segment,\n    factory: Angulartics2Segment.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Segment;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Intercom = /*#__PURE__*/(() => {\n  class Angulartics2Intercom {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n      this.angulartics2.setUserPropertiesOnce.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        this.eventTrack('Pageview', {\n          url: path\n        });\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        Intercom('trackEvent', action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserProperties(properties) {\n      try {\n        if (properties.userId && !properties.user_id) {\n          properties.user_id = properties.userId;\n        }\n\n        Intercom('boot', properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Intercom.ɵfac = function Angulartics2Intercom_Factory(t) {\n    return new (t || Angulartics2Intercom)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Intercom.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Intercom,\n    factory: Angulartics2Intercom.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Intercom;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Woopra = /*#__PURE__*/(() => {\n  class Angulartics2Woopra {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n\n      if (typeof woopra === 'undefined') {\n        console.warn('Woopra not found');\n      }\n\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        woopra.track('pv', {\n          url: path\n        });\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        woopra.track(action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserProperties(properties) {\n      try {\n        if (properties.email) {\n          woopra.identify(properties);\n        }\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Woopra.ɵfac = function Angulartics2Woopra_Factory(t) {\n    return new (t || Angulartics2Woopra)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Woopra.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Woopra,\n    factory: Angulartics2Woopra.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Woopra;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Clicky = /*#__PURE__*/(() => {\n  class Angulartics2Clicky {\n    constructor(angulartics2, titleService) {\n      this.angulartics2 = angulartics2;\n      this.titleService = titleService;\n\n      if (typeof clicky === 'undefined') {\n        console.warn('Angulartics 2 Clicky Plugin: clicky global not found');\n      }\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventOrGoalTrack(x.action, x.properties));\n    }\n    /**\n     * Track Page in Clicky\n     *\n     * @param path location\n     *\n     * @link https://clicky.com/help/custom/manual#log\n     */\n\n\n    pageTrack(path) {\n      const title = this.titleService.getTitle();\n      clicky.log(path, title, 'pageview');\n    }\n    /**\n     * Track Event Or Goal in Clicky\n     *\n     * @param action Action name\n     * @param properties Definition of 'properties.goal' determines goal vs event tracking\n     *\n     * @link https://clicky.com/help/custom/manual#log\n     * @link https://clicky.com/help/custom/manual#goal\n     */\n\n\n    eventOrGoalTrack(action, properties) {\n      if (typeof properties.goal === 'undefined') {\n        const title = properties.title || null;\n        const type = properties.type != null ? this.validateType(properties.type) : null;\n        clicky.log(action, title, type);\n      } else {\n        const goalId = properties.goal;\n        const revenue = properties.revenue;\n        clicky.goal(goalId, revenue, !!properties.noQueue);\n      }\n    }\n\n    validateType(type) {\n      const EventType = ['pageview', 'click', 'download', 'outbound'];\n      return EventType.indexOf(type) > -1 ? type : 'pageview';\n    }\n\n  }\n\n  Angulartics2Clicky.ɵfac = function Angulartics2Clicky_Factory(t) {\n    return new (t || Angulartics2Clicky)(i0.ɵɵinject(Angulartics2), i0.ɵɵinject(i2$1.Title));\n  };\n\n  Angulartics2Clicky.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Clicky,\n    factory: Angulartics2Clicky.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Clicky;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Amplitude = /*#__PURE__*/(() => {\n  class Angulartics2Amplitude {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUsername.subscribe(x => this.setUsername(x));\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n      this.angulartics2.setUserPropertiesOnce.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        this.eventTrack('Pageview', {\n          url: path\n        });\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        amplitude.getInstance().logEvent(action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUsername(userId) {\n      try {\n        amplitude.getInstance().setUserId(userId);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserProperties(properties) {\n      try {\n        amplitude.getInstance().setUserProperties(properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Amplitude.ɵfac = function Angulartics2Amplitude_Factory(t) {\n    return new (t || Angulartics2Amplitude)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Amplitude.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Amplitude,\n    factory: Angulartics2Amplitude.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Amplitude;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2Splunk = /*#__PURE__*/(() => {\n  class Angulartics2Splunk {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n\n      if (typeof sp === 'undefined') {\n        console.warn('Splunk not found');\n      }\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        sp.pageview(path);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        sp.track(action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2Splunk.ɵfac = function Angulartics2Splunk_Factory(t) {\n    return new (t || Angulartics2Splunk)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2Splunk.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2Splunk,\n    factory: Angulartics2Splunk.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2Splunk;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2IBMDigitalAnalytics = /*#__PURE__*/(() => {\n  class Angulartics2IBMDigitalAnalytics {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n\n      if (typeof window['cmCreatePageviewTag'] !== 'function') {\n        console.warn('Angulartics 2 IBM Digital Analytics Plugin: eluminate.js is not loaded');\n      }\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n    /**\n     * Track Page in IBM Digital Analytics\n     *\n     * @param path location\n     *\n     * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_pageviewtag.html\n     */\n\n\n    pageTrack(path) {\n      const cmCreatePageviewTag = window['cmCreatePageviewTag'];\n      cmCreatePageviewTag(path, null, null, null);\n    }\n    /**\n     * Track an event in IBM Digital Analytics\n     *\n     * @param action A string corresponding to the type of event that needs to be tracked.\n     * @param properties The properties that need to be logged with the event.\n     */\n\n\n    eventTrack(action, properties = {}) {\n      const cmDisplayShops = window['cmDisplayShops'];\n\n      switch (action) {\n        /**\n         * @description The Product View tag captures information about vdigitalDataiews of product detail pages.\n         *  The Product View tag should be called on the lowest level detail page for products, which is typically\n         *  the Product Details page. You can view example Product View tags below.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_prodviewtag.html\n         */\n        case 'cmCreateProductviewTag':\n          const cmCreateProductviewTag = window['cmCreateProductviewTag'];\n          cmCreateProductviewTag(properties.productId, properties.productName, properties.categoryId, properties.attrbute, properties.virtualCategory);\n          break;\n\n        /**\n         * @description The Shop Action 5 tag captures data about selected products and which products are present in a shopping cart,\n         *  if any, when the cart is viewed.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_shopact5tag.html\n         */\n\n        case 'cmCreateShopAction5Tag':\n          const cmCreateShopAction5Tag = window['cmCreateShopAction5Tag'];\n          cmCreateShopAction5Tag(properties.productId, properties.productName, properties.quantity, properties.unitPrice, properties.categoryId, properties.attrbute, properties.extraFields, properties.virtualCategory);\n          cmDisplayShops();\n          break;\n\n        /**\n         * @description The Shop Action 9 tag captures data about what products were purchased by a customer.\n         *  Like the Shop Action 5 tag, one tag should be sent for each product line item purchased. These tags should be sent\n         *  on the receipt or other completion page confirming a successful order.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_shopact9tag.html\n         */\n\n        case 'cmCreateShopAction9Tag':\n          const cmCreateShopAction9Tag = window['cmCreateShopAction9Tag'];\n          cmCreateShopAction9Tag(properties.productId, properties.productName, properties.quantity, properties.unitPrice, properties.registrationId, properties.orderId, properties.orderSubtotal, properties.categoryId, properties.attrbute, properties.extraFields);\n          cmDisplayShops();\n          break;\n\n        /**\n         * @description The Order tag captures order header information such as Registration ID, order ID, order subtotal,\n         *  and shipping and handling. The Order tag should be sent on the receipt page confirming order completion.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_ordertag.html\n         */\n\n        case 'cmCreateOrderTag':\n          const cmCreateOrderTag = window['cmCreateOrderTag'];\n          cmCreateOrderTag(properties.orderId, properties.orderSubtotal, properties.orderShipping, properties.registrationId, properties.registrantCity, properties.registrantState, properties.registrantPostalCode, properties.attrbute, properties.extraFields);\n          break;\n\n        /**\n         * @description The Registration tag creates a Lifetime Visitor Experience Profile (LIVE Profile) by associating a single\n         *  common Registration ID with the IBM® Digital Analytics permanent cookie set in every browser visiting the tagged site.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_registrationtag.html\n         */\n\n        case 'cmCreateRegistrationTag':\n          const cmCreateRegistrationTag = window['cmCreateRegistrationTag'];\n          cmCreateRegistrationTag(properties.registrationId, properties.registrantEmail, properties.registrantCity, properties.registrantState, properties.registrantPostalCode, properties.registrantCountry, properties.attrbute);\n          break;\n\n        /**\n         * @description The Element tag is used to track intra-page content in IBM® Digital Analytics. Data collected by\n         *  the Element tag is used to populate values in the Element Categories and Top Viewed Elements reports.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_elementtag.html\n         */\n\n        case 'cmCreateElementTag':\n          const cmCreateElementTag = window['cmCreateElementTag'];\n          cmCreateElementTag(properties.elementId, properties.elementCategory, properties.attrbute);\n          break;\n\n        /**\n         * @description The Conversion Event tag is employed for tracking of general non-commerce conversion events.\n         * The Conversion Event tag is used to populate values in the Conversion Events Reports and to create Key Segments.\n         * This tag and the reports it populates enable analysis of a wide variety of site activities.\n         *\n         * @link https://www.ibm.com/support/knowledgecenter/SSPG9M/Implementation/impl_conversioneventtag.html\n         */\n\n        case 'cmCreateConversionEventTag':\n          const cmCreateConversionEventTag = window['cmCreateConversionEventTag'];\n          cmCreateConversionEventTag(properties.eventId, properties.actionType, properties.eventCategoryId, properties.points, properties.attrbute, properties.extraFields);\n          break;\n\n        default:\n          console.warn('Unsupported Event Action');\n      }\n    }\n\n  }\n\n  Angulartics2IBMDigitalAnalytics.ɵfac = function Angulartics2IBMDigitalAnalytics_Factory(t) {\n    return new (t || Angulartics2IBMDigitalAnalytics)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2IBMDigitalAnalytics.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2IBMDigitalAnalytics,\n    factory: Angulartics2IBMDigitalAnalytics.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2IBMDigitalAnalytics;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Angulartics2GoSquared = /*#__PURE__*/(() => {\n  class Angulartics2GoSquared {\n    constructor(angulartics2) {\n      this.angulartics2 = angulartics2;\n      this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n      this.angulartics2.setUserPropertiesOnce.subscribe(x => this.setUserProperties(x));\n    }\n\n    startTracking() {\n      this.angulartics2.pageTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.pageTrack(x.path));\n      this.angulartics2.eventTrack.pipe(this.angulartics2.filterDeveloperMode()).subscribe(x => this.eventTrack(x.action, x.properties));\n    }\n\n    pageTrack(path) {\n      try {\n        _gs('track', path);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    eventTrack(action, properties) {\n      try {\n        _gs('event', action, properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n    setUserProperties(properties) {\n      try {\n        _gs('identify', properties);\n      } catch (e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n\n  }\n\n  Angulartics2GoSquared.ɵfac = function Angulartics2GoSquared_Factory(t) {\n    return new (t || Angulartics2GoSquared)(i0.ɵɵinject(Angulartics2));\n  };\n\n  Angulartics2GoSquared.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Angulartics2GoSquared,\n    factory: Angulartics2GoSquared.ɵfac,\n    providedIn: 'root'\n  });\n  return Angulartics2GoSquared;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ANGULARTICS2_TOKEN, AngularRouterTracking, Angulartics2, Angulartics2AdobeAnalytics, Angulartics2Amplitude, Angulartics2AppInsights, Angulartics2BaiduAnalytics, Angulartics2Clicky, Angulartics2Facebook, Angulartics2GoSquared, Angulartics2GoogleAnalytics, Angulartics2GoogleAnalyticsEnhancedEcommerce, Angulartics2GoogleGlobalSiteTag, Angulartics2GoogleTagManager, Angulartics2Hubspot, Angulartics2IBMDigitalAnalytics, Angulartics2Intercom, Angulartics2Kissmetrics, Angulartics2LaunchByAdobe, Angulartics2Matomo, Angulartics2Mixpanel, Angulartics2Module, Angulartics2On, Angulartics2OnModule, Angulartics2Pyze, Angulartics2RouterlessModule, Angulartics2Segment, Angulartics2Splunk, Angulartics2Woopra, AppInsightsDefaults, DefaultConfig, GoogleAnalyticsDefaults, GoogleGlobalSiteTagDefaults, GoogleTagManagerDefaults, RouterlessTracking }; //# sourceMappingURL=angulartics2.mjs.map","map":null,"metadata":{},"sourceType":"module"}