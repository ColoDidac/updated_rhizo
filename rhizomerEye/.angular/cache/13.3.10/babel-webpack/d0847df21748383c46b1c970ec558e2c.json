{"ast":null,"code":"import { HttpClient, HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { Rest2Service } from '../shared/rest2.service';\nimport { Filter } from '../breadcrumb/filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClassService = /*#__PURE__*/(() => {\n  class ClassService extends Rest2Service {\n    constructor(http) {\n      super('datasets', 'classes', http);\n      this.http = http;\n    }\n\n    getInstances(did, cid, filters, page, pageSize) {\n      let params = Filter.toQuery(filters);\n      params = params.append('page', (page - 1).toString());\n      params = params.append('size', pageSize.toString());\n      return this.http.get(`${environment.API}/datasets/${did}/classes/${cid}/instances`, {\n        params: params\n      });\n    }\n\n    getInstancesLabels(did, cid, filters, page, pageSize) {\n      let params = Filter.toQuery(filters);\n      params = params.append('page', (page - 1).toString());\n      params = params.append('size', pageSize.toString());\n      return this.http.get(`${environment.API}/datasets/${did}/classes/${cid}/instancesLabels`, {\n        params: params\n      });\n    }\n\n    getInstancesCount(did, cid, filters) {\n      let params = Filter.toQuery(filters);\n      return this.http.get(`${environment.API}/datasets/${did}/classes/${cid}/count`, {\n        params: params\n      });\n    }\n\n    getTopClasses(did, top) {\n      let params = new HttpParams();\n      params = params.append('top', top.toString());\n      return this.http.get(`${environment.API}/datasets/${did}/classes`, {\n        params: params\n      });\n    }\n\n    getTopClassesContaining(did, top, containing, lang) {\n      let params = new HttpParams();\n      params = params.append('top', top.toString());\n      params = params.append('containing', containing);\n      params = params.append('lang', lang);\n      return this.http.get(`${environment.API}/datasets/${did}/classes`, {\n        params: params\n      });\n    }\n\n    getClassCurie(did, uri) {\n      let params = new HttpParams();\n      params = params.append('uri', uri);\n      return this.http.get(`${environment.API}/datasets/${did}/classByUri`, {\n        params: params\n      });\n    }\n\n  }\n\n  ClassService.ɵfac = function ClassService_Factory(t) {\n    return new (t || ClassService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ClassService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClassService,\n    factory: ClassService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClassService;\n})();","map":null,"metadata":{},"sourceType":"module"}