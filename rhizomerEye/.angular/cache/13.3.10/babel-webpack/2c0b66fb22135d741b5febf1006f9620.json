{"ast":null,"code":"import { Description } from '../description/description';\nexport class Resource extends Description {\n  constructor(values = {}, context = {}, labels = new Map(), anonResources = new Map(), prefLabel = 'en') {\n    super(values, context, labels, prefLabel);\n    this.anonResources = anonResources;\n\n    if (this.topicOf.length > 0 && this.topicOf[0].asString().startsWith('_:')) {\n      const anon = anonResources.get(this.topicOf[0].asString());\n      anon === null || anon === void 0 ? void 0 : anon.properties.filter(property => property.uri === 'http://www.w3.org/2005/Atom/body').forEach(property => {\n        this.anonBody = property;\n      });\n    }\n  }\n\n  asJsonLd() {\n    let jsonld = '{ \"@graph\": [\\n';\n    jsonld += super.asJsonLd();\n    this.anonResources.forEach(anonResource => jsonld += ', ' + anonResource.asJsonLd());\n    return jsonld + '\\n ] }';\n  }\n\n  asSchemaOrgJsonLd() {\n    let jsonld = '{ \"@context\": \"https://schema.org\", \"@graph\": [\\n';\n    jsonld += super.asJsonLd();\n    this.anonResources.forEach(anonResource => jsonld += ', ' + anonResource.asJsonLd());\n    jsonld = jsonld.replace(/https?:\\/\\/schema\\.org\\//gi, '');\n    return jsonld + '\\n ] }';\n  }\n\n  combine(addition) {\n    addition.anonResources.forEach((value, key) => this.anonResources.set(key, value));\n    this.depiction = this.depiction.concat(addition.depiction);\n    this.labels = this.labels.concat(addition.labels);\n    addition.properties.forEach(property => {\n      const present = this.properties.filter(existing => existing.uri === property.uri);\n\n      if (present.length) {\n        present[0].values.concat(property.values);\n      } else {\n        this.properties.push(property);\n      }\n    });\n    this.properties = this.properties.sort((a, b) => a.label.localeCompare(b.label));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}