{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { convertToParamMap } from '@angular/router';\nimport { RangeValue } from '../range/rangeValue';\nimport { UriUtils } from '../shared/uriutils';\nexport var Operator = /*#__PURE__*/(() => {\n  (function (Operator) {\n    Operator[\"NONE\"] = \"\";\n    Operator[\"OR\"] = \"OR\";\n    Operator[\"AND\"] = \"AND\";\n  })(Operator || (Operator = {}));\n\n  return Operator;\n})();\nexport class Filter {\n  constructor(classId, facet, range, operator, values) {\n    this.classId = classId;\n    this.facet = facet;\n    this.range = range;\n    this.operator = operator;\n    this.values = values;\n  }\n\n  getLabel(translate) {\n    var _a;\n\n    return (_a = this.values) === null || _a === void 0 ? void 0 : _a.map(value => (value.negated ? translate.instant('breadcrumbs.not') + ' ' : '') + value.getLabel(translate.currentLang)).join(this.operator == Operator.OR ? ' ' + translate.instant('breadcrumbs.or') + ' ' : ' ' + translate.instant('breadcrumbs.and') + ' ');\n  }\n\n  static parseOperator(value) {\n    if (value && value.startsWith('OR(') && value.endsWith(')')) {\n      return Operator.OR;\n    } else if (value && value.startsWith('AND(') && value.endsWith(')')) {\n      return Operator.AND;\n    } else {\n      return Operator.NONE;\n    }\n  }\n\n  static parseValues(value, facet, operator) {\n    if (!value || value == 'null') return [];\n\n    if (operator == Operator.NONE) {\n      return Filter.splitValues(value, facet);\n    } else if (operator == Operator.AND || operator == Operator.OR) {\n      return Filter.splitValues(value.substring(value.indexOf('(') + 1, value.lastIndexOf(')')), facet);\n    } else {\n      return [];\n    }\n  }\n\n  static splitValues(values, facet) {\n    if (/^!?<[^>]+>(?: !?<[^>]+>)*$/.test(values)) {\n      return values.match(/!?<[^>]+>/g).map(match => {\n        const negated = match.startsWith('!');\n        const uri = match.substring(negated ? 2 : 1, match.length - 1);\n        const rangeValue = new RangeValue({\n          uri,\n          curie: ':' + UriUtils.localName(uri)\n        }, facet, []);\n        rangeValue.selected = true;\n        rangeValue.negated = negated;\n        return rangeValue;\n      });\n    } else if (/^!?\"[^\"]+\"(?: !?\"[^\"]+\")*/.test(values)) {\n      return values.match(/!?\"[^\"]+\"/g).map(match => {\n        const negated = match.startsWith('!');\n        const value = match.substring(negated ? 2 : 1, match.length - 1);\n        const rangeValue = new RangeValue({\n          value\n        }, facet, []);\n        rangeValue.selected = true;\n        rangeValue.negated = negated;\n        return rangeValue;\n      });\n    } else {\n      return [];\n    }\n  }\n\n  static valuesToParam(values, operator) {\n    if (!values.length) return 'null';\n    let toParam = '';\n\n    if (operator != Operator.NONE) {\n      toParam += operator + '(' + values.map(value => (value.negated ? '!' : '') + value.value).join(' ') + ')';\n    } else {\n      toParam += values.map(value => (value.negated ? '!' : '') + value.value).join(' ');\n    }\n\n    return toParam;\n  }\n\n  static toQuery(filters) {\n    let params = new HttpParams();\n    filters.forEach(filter => params = params.append(filter.facet.uri + (filter.range ? ' ' + filter.range.uri : ''), this.valuesToParam(filter.values, filter.operator)));\n    return params;\n  }\n\n  static toParam(filters) {\n    let params = new HttpParams();\n    filters.forEach(filter => params = params.append(filter.facet.curie + (filter.range ? ' ' + filter.range.curie : ''), this.valuesToParam(filter.values, filter.operator)));\n    return params;\n  }\n\n  static toParamMap(filters) {\n    const params = {};\n    filters.forEach(filter => params[filter.facet.curie + (filter.range ? ' ' + filter.range.curie : '')] = this.valuesToParam(filter.values, filter.operator));\n    return convertToParamMap(params);\n  }\n\n  static toString(filters, translate) {\n    return filters.map(filter => filter.facet.getLabel(translate.currentLang) + (filter.getLabel(translate) ? ': ' + filter.getLabel(translate) : '')).join(' & ');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}