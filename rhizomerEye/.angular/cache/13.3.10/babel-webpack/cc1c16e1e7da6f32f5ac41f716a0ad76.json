{"ast":null,"code":"import { UriUtils } from '../shared/uriutils';\nexport class Value {\n  constructor(key, value, context = {}, labels = new Map(), prefLang = 'en') {\n    if (value['@value']) {\n      this.value = value['@value'];\n\n      if (value['@type']) {\n        this.type = UriUtils.expandUri(value['@type'], context);\n      }\n    } else if (value['@id']) {\n      this.uri = UriUtils.expandUri(value['@id'], context);\n      this.label = UriUtils.getLabel(this.uri, labels, prefLang);\n    } else if (typeof value === 'string') {\n      const isUri = context[key] && context[key]['@type'] ? context[key]['@type'] === '@id' : false;\n\n      if (isUri || key === '@type') {\n        this.uri = UriUtils.expandUri(value, context);\n        this.label = UriUtils.getLabel(this.uri, labels, prefLang);\n      } else {\n        this.value = value;\n      }\n    } else {\n      this.value = value;\n    }\n\n    if (value['@language']) {\n      this.language = value['@language'];\n    }\n  }\n\n  static getValues(key, input, context = {}, labels = new Map(), prefLang) {\n    return input instanceof Array ? input.map(v => new Value(key, v, context, labels, prefLang)) : [new Value(key, input, context, labels, prefLang)];\n  }\n\n  isAnon() {\n    return this.asString().startsWith('_:');\n  }\n\n  isUrlValue() {\n    return UriUtils.isUrl(this.asString());\n  }\n\n  asString() {\n    return this.value !== undefined ? this.value.toString() : this.uri;\n  }\n\n  asJsonLd() {\n    if (this.value) {\n      return '{ \"@value\": ' + JSON.stringify(this.value) + (this.language ? ', \"@language\": \"' + this.language + '\"' : '') + (this.type ? ', \"@type\": \"' + this.type + '\"' : '') + ' }';\n    } else {\n      return '{ \"@id\": \"' + this.uri + '\" }';\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}