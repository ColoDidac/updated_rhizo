{"ast":null,"code":"import { Breadcrumb } from './breadcrumb';\nimport { BehaviorSubject } from 'rxjs';\nimport { Filter, Operator } from './filter';\nimport { Location } from '@angular/common';\nimport { Title } from '@angular/platform-browser';\nimport { Angulartics2GoogleAnalytics } from 'angulartics2';\nimport { RangeService } from '../range/range.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"../range/range.service\";\nimport * as i4 from \"angulartics2\";\nexport let BreadcrumbService = /*#__PURE__*/(() => {\n  class BreadcrumbService {\n    constructor(location, titleService, rangeService, angularticsService) {\n      this.location = location;\n      this.titleService = titleService;\n      this.rangeService = rangeService;\n      this.angularticsService = angularticsService;\n      this.filters = [];\n      this.breadcrumbs = new BehaviorSubject([]);\n      this.filtersSelection = new BehaviorSubject([]);\n    }\n\n    navigateTo(url) {\n      this.breadcrumbs.next(url.split('?')[0].split('/').filter(step => step !== '').map(step => new Breadcrumb(step, url)));\n    }\n\n    addFacetFilter(filter) {\n      this.filters = this.filters.concat(filter);\n      this.updateLocation();\n    }\n\n    addFacetFilters(filters) {\n      this.filters = filters;\n      this.updateLocation();\n    }\n\n    addFacetFilterValue(classId, facet, range, value, operator) {\n      let filter = this.popFacetFilter(classId, facet, range);\n\n      if (!filter) {\n        this.filters = this.filters.concat(new Filter(classId, facet, range, operator, [value]));\n      } else {\n        filter.values = filter.values.concat(value);\n\n        if (filter.values.length > 1) {\n          filter.operator = operator;\n        }\n\n        this.filters = this.filters.concat(filter);\n      }\n\n      this.updateLocation();\n    }\n\n    negateFacetFilterValue(classId, facet, range, value, operator) {\n      const negatedValue = value;\n      negatedValue.negated = true;\n      let filter = this.popFacetFilter(classId, facet, range);\n\n      if (!filter) {\n        this.filters = this.filters.concat(new Filter(classId, facet, range, Operator.NONE, [negatedValue]));\n      } else {\n        filter.values = filter.values.filter(existing => existing.value !== negatedValue.value).concat(negatedValue);\n\n        if (filter.values.length > 1) {\n          filter.operator = operator;\n        }\n\n        this.filters = this.filters.concat(filter);\n      }\n\n      this.updateLocation();\n    }\n\n    removeFacetFilterValue(classId, facet, range, value) {\n      let filter = this.popFacetFilter(classId, facet, range);\n\n      if (filter) {\n        filter.values = filter.values.filter(existing => existing.value !== value.value);\n\n        if (filter.values.length == 1) {\n          filter.operator = Operator.NONE;\n        }\n\n        if (filter.values.length > 0) {\n          this.filters = this.filters.concat(filter);\n        }\n      }\n\n      this.updateLocation();\n    }\n\n    removeFacetFilter(classId, facet, range) {\n      this.filters = this.filters.filter(filter => filter.classId !== classId || filter.facet.id !== facet.id || filter.range && filter.range.id !== range.id);\n      this.updateLocation();\n    }\n\n    getFacetFilter(classId, facet, range) {\n      return this.filters.find(filter => filter.classId == classId && filter.facet.id == facet.id && filter.range.id == range.id);\n    }\n\n    popFacetFilter(classId, facet, range) {\n      const filter = this.getFacetFilter(classId, facet, range);\n      this.filters = this.filters.filter(filter => filter.classId !== classId || filter.facet.id !== facet.id || filter.range && filter.range.id !== range.id);\n      return filter;\n    }\n\n    clearFilter() {\n      this.filters = [];\n      this.filtersSelection.next(this.filters);\n    }\n\n    updateLocation() {\n      const locationPath = this.location.path().split('?')[0];\n      const locationQuery = Filter.toParam(this.filters).toString();\n      this.location.go(locationPath, locationQuery);\n      this.navigateTo(this.location.path());\n      this.angularticsService.pageTrack(this.location.path());\n      this.filtersSelection.next(this.filters);\n    }\n\n  }\n\n  BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) {\n    return new (t || BreadcrumbService)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.Title), i0.ɵɵinject(i3.RangeService), i0.ɵɵinject(i4.Angulartics2GoogleAnalytics));\n  };\n\n  BreadcrumbService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BreadcrumbService,\n    factory: BreadcrumbService.ɵfac,\n    providedIn: 'root'\n  });\n  return BreadcrumbService;\n})();","map":null,"metadata":{},"sourceType":"module"}