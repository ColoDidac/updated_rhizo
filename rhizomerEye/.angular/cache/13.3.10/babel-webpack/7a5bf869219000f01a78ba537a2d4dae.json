{"ast":null,"code":"import { RestService } from '../shared/rest.service';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DatasetService = /*#__PURE__*/(() => {\n  class DatasetService extends RestService {\n    constructor(http) {\n      super('datasets', http);\n      this.http = http;\n    }\n\n    clearClasses(did) {\n      const body = JSON.stringify([]);\n      return this.http.put(`${environment.API}/datasets/${did}/classes`, body, this.getHttpOptions());\n    }\n\n    describeDatasetResource(did, resource) {\n      let params = new HttpParams();\n      params = params.append('uri', resource);\n      return this.http.get(`${environment.API}/datasets/${did}/describe`, {\n        params: params\n      });\n    }\n\n    updateDatasetResource(did, resource, updated) {\n      let params = new HttpParams();\n      params = params.append('uri', resource);\n      return this.http.put(`${environment.API}/datasets/${did}/update`, updated, {\n        params: params,\n        headers: new HttpHeaders({\n          'Content-Type': 'application/ld+json'\n        })\n      });\n    }\n\n    browseUriData(did, resource) {\n      let params = new HttpParams();\n      params = params.append('uri', resource);\n      let headers = new HttpHeaders();\n      headers = headers.append('Accept', 'application/json');\n      return this.http.get(`${environment.API}/datasets/${did}/browseData`, {\n        params: params,\n        headers: headers\n      });\n    }\n\n    browseUriContent(did, resource) {\n      let params = new HttpParams();\n      params = params.append('uri', resource);\n      let headers = new HttpHeaders();\n      headers = headers.append('Accept', 'text/html');\n      return this.http.get(`${environment.API}/datasets/${did}/browse`, {\n        params: params,\n        headers: headers,\n        responseType: 'text'\n      });\n    }\n\n    resourceIncomingFacets(did, resource) {\n      let params = new HttpParams();\n      params = params.append('uri', resource);\n      let headers = new HttpHeaders();\n      headers = headers.append('Accept', 'application/json');\n      return this.http.get(`${environment.API}/datasets/${did}/incoming`, {\n        params: params,\n        headers: headers\n      });\n    }\n\n    searchInstances(did, text, page, pageSize) {\n      let params = new HttpParams();\n      params = params.append('text', text);\n      params = params.append('page', (page - 1).toString());\n      params = params.append('size', pageSize.toString());\n      return this.http.get(`${environment.API}/datasets/${did}/search`, {\n        params: params\n      });\n    }\n\n    getSearchInstancesCount(did, text) {\n      let params = new HttpParams();\n      params = params.append('text', text);\n      return this.http.get(`${environment.API}/datasets/${did}/searchCount`, {\n        params: params\n      });\n    }\n\n    searchTypesFacetValues(did, text) {\n      let params = new HttpParams();\n      params = params.append('text', text);\n      params = params.append('page', '0');\n      params = params.append('size', '100');\n      return this.http.get(`${environment.API}/datasets/${did}/searchTypes`, {\n        params: params\n      });\n    }\n\n  }\n\n  DatasetService.ɵfac = function DatasetService_Factory(t) {\n    return new (t || DatasetService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DatasetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatasetService,\n    factory: DatasetService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatasetService;\n})();","map":null,"metadata":{},"sourceType":"module"}