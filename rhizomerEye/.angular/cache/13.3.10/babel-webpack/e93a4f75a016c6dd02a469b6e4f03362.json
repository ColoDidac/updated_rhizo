{"ast":null,"code":"import { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { ErrorMessageService } from './error-message.service';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./error-message.service\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(errorMessageService) {\n      this.errorMessageService = errorMessageService;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(tap({\n        next: () => {},\n        error: error => {\n          if (error instanceof HttpErrorResponse) {\n            console.log('HTTP Error Interceptor: ' + this.extractErrorMessage(error));\n\n            if (error.status !== 404 && !request.url.includes('/browseData')) {\n              const errorMessage = this.extractErrorMessage(error);\n\n              if (errorMessage) {\n                this.errorMessageService.showErrorMessage(this.extractErrorMessage(error));\n              }\n            }\n          }\n        }\n      }));\n    }\n\n    extractErrorMessage(error) {\n      if (error.error) {\n        if (error.error.errors) {\n          return error.error.errors.map(e => e.entity + ' ' + e.property + ': ' + e.message).join(', ');\n        }\n\n        if (error.error.cause || error.error.message) {\n          let cause = error.error;\n\n          while (cause.cause) {\n            cause = cause.cause;\n          }\n\n          return cause.message.split('?')[0];\n        }\n\n        if (typeof error.error.error === 'string') {\n          return error.error.error;\n        }\n      }\n\n      if (error.message) {\n        return error.message;\n      }\n\n      return error.name;\n    }\n\n  }\n\n  HttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n    return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.ErrorMessageService));\n  };\n\n  HttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptor,\n    factory: HttpErrorInterceptor.ɵfac\n  });\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}