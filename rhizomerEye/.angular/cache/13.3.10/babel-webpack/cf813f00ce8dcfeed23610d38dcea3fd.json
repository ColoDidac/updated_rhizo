{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction loadScript(src, opts, cb) {\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var script = document.createElement('script');\n\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  cb = cb || function () {};\n\n  script.type = opts.type || 'text/javascript';\n  script.charset = opts.charset || 'utf8';\n  script.async = 'async' in opts ? !!opts.async : true;\n  script.src = src;\n\n  if (opts.attrs) {\n    setAttributes(script, opts.attrs);\n  }\n\n  if (opts.text) {\n    script.text = String(opts.text);\n  }\n\n  var onend = 'onload' in script ? stdOnEnd : ieOnEnd;\n  onend(script, cb);\n\n  if (!script.onload) {\n    stdOnEnd(script, cb);\n  }\n\n  head.appendChild(script);\n}\n\nfunction setAttributes(script, attrs) {\n  for (var attr in attrs) {\n    script.setAttribute(attr, attrs[attr]);\n  }\n}\n\nfunction stdOnEnd(script, cb) {\n  script.onload = function () {\n    this.onerror = this.onload = null;\n    cb(null, script);\n  };\n\n  script.onerror = function () {\n    this.onerror = this.onload = null;\n    cb(new Error('Failed to load ' + this.src), script);\n  };\n}\n\nfunction ieOnEnd(script, cb) {\n  script.onreadystatechange = function () {\n    if (this.readyState != 'complete' && this.readyState != 'loaded') {\n      return;\n    }\n\n    this.onreadystatechange = null;\n    cb(null, script);\n  };\n}\n\nvar promise;\n\nfunction getEditorNamespace(editorURL, onNamespaceLoaded) {\n  if ('CKEDITOR' in window) {\n    return Promise.resolve(CKEDITOR);\n  }\n\n  if (typeof editorURL !== 'string' || editorURL.length < 1) {\n    return Promise.reject(new TypeError('CKEditor URL must be a non-empty string.'));\n  }\n\n  if (!promise) {\n    promise = getEditorNamespace.scriptLoader(editorURL).then(function (res) {\n      if (onNamespaceLoaded) {\n        onNamespaceLoaded(res);\n      }\n\n      return res;\n    });\n  }\n\n  return promise;\n}\n\ngetEditorNamespace.scriptLoader = function (editorURL) {\n  return new Promise(function (scriptResolve, scriptReject) {\n    loadScript(editorURL, function (err) {\n      promise = undefined;\n\n      if (err) {\n        return scriptReject(err);\n      } else if (!window.CKEDITOR) {\n        return scriptReject(new Error('Script loaded from editorUrl doesn\\'t provide CKEDITOR namespace.'));\n      }\n\n      scriptResolve(CKEDITOR);\n    });\n  });\n};\n\nfunction debounce(fn, delay) {\n  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var cancel;\n  return function () {\n    clearTimeout(cancel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    cancel = setTimeout(fn.bind.apply(fn, [context].concat(args)), delay);\n  };\n}\n\nexport { debounce, getEditorNamespace };","map":null,"metadata":{},"sourceType":"module"}