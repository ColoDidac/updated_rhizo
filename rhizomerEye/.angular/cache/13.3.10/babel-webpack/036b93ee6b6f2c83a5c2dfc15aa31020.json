{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { BreadcrumbService } from '../../breadcrumb/breadcrumb.service';\nimport { Facet } from '../../facet/facet';\nimport { Range } from '../range';\nimport { RangeValue } from '../rangeValue';\nimport { DatasetService } from '../../dataset/dataset.service';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../breadcrumb/breadcrumb.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"../../dataset/dataset.service\";\nimport * as i5 from \"@angular/common\";\n\nfunction TypeRangeComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.range.timesUsed);\n  }\n}\n\nfunction TypeRangeComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 7);\n  }\n}\n\nfunction TypeRangeComponent_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p\", 8);\n    i0.ɵɵlistener(\"click\", function TypeRangeComponent_p_6_Template_p_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const value_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.exploreType(value_r3);\n    });\n    i0.ɵɵelementStart(1, \"span\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const value_r3 = ctx.$implicit;\n    const lastValue_r4 = ctx.last;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"border-bottom\", !lastValue_r4)(\"bg-warning\", value_r3.selected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r2.valueToolTip(value_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(value_r3.getLabel(ctx_r2.translate.currentLang));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(value_r3.count);\n  }\n}\n\nvar RangeStatus = /*#__PURE__*/(() => {\n  (function (RangeStatus) {\n    RangeStatus[RangeStatus[\"UNEXPANDED\"] = 0] = \"UNEXPANDED\";\n    RangeStatus[RangeStatus[\"LOADING\"] = 1] = \"LOADING\";\n    RangeStatus[RangeStatus[\"EXPANDED\"] = 2] = \"EXPANDED\";\n  })(RangeStatus || (RangeStatus = {}));\n\n  return RangeStatus;\n})();\nexport let TypeRangeComponent = /*#__PURE__*/(() => {\n  class TypeRangeComponent {\n    constructor(router, breadcrumbService, translate, datasetService) {\n      this.router = router;\n      this.breadcrumbService = breadcrumbService;\n      this.translate = translate;\n      this.datasetService = datasetService;\n      this.range = new Range();\n      this.facet = new Facet();\n      this.ngUnsubscribe = new Subject();\n      this.status = RangeStatus.EXPANDED;\n      this.rangeStatus = RangeStatus;\n    }\n\n    ngOnInit() {\n      this.range.expanded = true;\n      this.text.subscribe(text => this.first100Values(this.range, text));\n    }\n\n    first100Values(range, text) {\n      this.status = RangeStatus.LOADING;\n      this.datasetService.searchTypesFacetValues(this.datasetId, text).subscribe(values => {\n        range.values = values.map(value => new RangeValue(value, this.facet, []));\n        this.status = RangeStatus.EXPANDED;\n      });\n    }\n\n    valueToolTip(value) {\n      let text = value.value;\n\n      if (text.startsWith('\"') && text.endsWith('\"')) {\n        text = text.slice(1, text.length - 1);\n      }\n\n      if (text !== value.getLabel(this.translate.currentLang)) {\n        return text;\n      } else {\n        return '';\n      }\n    }\n\n    exploreType(value) {\n      if (this.datasetId === 'default') {\n        this.router.navigate(['/overview', value.curie], {\n          queryParams: {\n            'rhz:contains xsd:string': '\"' + this.text.getValue() + '\"'\n          }\n        });\n      } else {\n        this.router.navigate(['/datasets', this.datasetId, value.curie], {\n          queryParams: {\n            'rhz:contains xsd:string': '\"' + this.text.getValue() + '\"'\n          }\n        });\n      }\n    }\n\n  }\n\n  TypeRangeComponent.ɵfac = function TypeRangeComponent_Factory(t) {\n    return new (t || TypeRangeComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.BreadcrumbService), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i4.DatasetService));\n  };\n\n  TypeRangeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TypeRangeComponent,\n    selectors: [[\"app-type-range\"]],\n    inputs: {\n      range: \"range\",\n      facet: \"facet\",\n      datasetId: \"datasetId\",\n      text: \"text\",\n      ngUnsubscribe: \"ngUnsubscribe\"\n    },\n    decls: 7,\n    vars: 5,\n    consts: [[1, \"card\", \"range\", \"p-2\", \"mb-1\"], [1, \"card-title\", \"p-1\", \"m-0\"], [3, \"title\"], [\"class\", \"badge badge-light badge-pill\", 4, \"ngIf\"], [\"class\", \"fa fa-circle-o-notch fa-spin ml-1\", 4, \"ngIf\"], [\"class\", \"card-text value small pl-3 m-0\", \"style\", \"cursor: pointer\", 3, \"border-bottom\", \"bg-warning\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"badge\", \"badge-light\", \"badge-pill\"], [1, \"fa\", \"fa-circle-o-notch\", \"fa-spin\", \"ml-1\"], [1, \"card-text\", \"value\", \"small\", \"pl-3\", \"m-0\", 2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"badge\", \"badge-secondary\", \"float-right\", \"mt-1\", \"mb-1\"]],\n    template: function TypeRangeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"p\", 1);\n        i0.ɵɵelementStart(2, \"b\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, TypeRangeComponent_span_4_Template, 2, 1, \"span\", 3);\n        i0.ɵɵtemplate(5, TypeRangeComponent_span_5_Template, 1, 0, \"span\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, TypeRangeComponent_p_6_Template, 5, 7, \"p\", 5);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.range.uri);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.range.getLabel(ctx.translate.currentLang));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.facet.ranges.length > 1);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.status === ctx.rangeStatus.LOADING);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.range.values);\n      }\n    },\n    directives: [i5.NgIf, i5.NgForOf],\n    styles: [\"\"]\n  });\n  return TypeRangeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}